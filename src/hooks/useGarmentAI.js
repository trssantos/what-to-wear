import { useState } from 'react';
import { useOpenAI } from './useOpenAI';
import { OPENAI_API_KEY, getClothingCategoriesByGender, COMMON_COLORS } from '../utils/constants';

export const useGarmentAI = () => {
  const { callOpenAI } = useOpenAI();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisHistory, setAnalysisHistory] = useState([]);

  // NOVA FUN√á√ÉO: Gerar metadata completa com auto-preenchimento
  const generateGarmentMetadataWithFormData = async (imageData, userProfile = {}, itemInfo = {}) => {
    if (!OPENAI_API_KEY) {
      throw new Error('API key da OpenAI n√£o configurada no sistema');
    }

    if (!imageData) {
      throw new Error('Imagem da pe√ßa √© obrigat√≥ria');
    }

    setIsAnalyzing(true);
    
    try {
      // Obter categorias dispon√≠veis baseadas no g√™nero
      const availableCategories = getClothingCategoriesByGender(userProfile?.gender);
      
      // Contexto do g√™nero
      const genderContext = userProfile?.gender ? `
PERFIL DO UTILIZADOR:
- G√™nero: ${userProfile.gender}

AN√ÅLISE ESPEC√çFICA POR G√äNERO:
${userProfile.gender === 'female' ? `
- FOCAR EM: Como a pe√ßa se adequa ao styling feminino
- CONSIDERAR: Versatilidade para ocasi√µes femininas, layering feminino
- CATEGORIZA√á√ÉO: Priorizar categorias espec√≠ficas femininas quando aplic√°vel
- NAMING: Usar terminologia feminina apropriada
` : userProfile.gender === 'male' ? `
- FOCAR EM: Como a pe√ßa se adequa ao styling masculino
- CONSIDERAR: Adequa√ß√£o a dress codes masculinos, versatilidade
- CATEGORIZA√á√ÉO: Priorizar categorias espec√≠ficas masculinas quando aplic√°vel
- NAMING: Usar terminologia masculina apropriada
` : `
- FOCAR EM: Versatilidade neutra da pe√ßa
- CONSIDERAR: Adequa√ß√£o a diferentes express√µes de g√™nero
- CATEGORIZA√á√ÉO: Usar categorias neutras e inclusivas
`}
` : '';

      const prompt = `Como especialista em an√°lise de vestu√°rio e cataloga√ß√£o digital, analisa esta imagem de uma pe√ßa de roupa e gera AUTOMATICAMENTE todos os dados necess√°rios para pr√©-preencher o formul√°rio de adi√ß√£o ao arm√°rio digital.

${genderContext}

CATEGORIAS DISPON√çVEIS:
${availableCategories.join(', ')}

CORES DISPON√çVEIS:
${COMMON_COLORS.join(', ')}

INFORMA√á√ïES FORNECIDAS PELO UTILIZADOR:
- Nome: ${itemInfo.name || 'N√£o especificado'}
- Categoria: ${itemInfo.category || 'N√£o especificada'}
- Cor: ${itemInfo.color || 'N√£o especificada'}
- Marca: ${itemInfo.brand || 'N√£o especificada'}
- Tags: ${itemInfo.tags?.join(', ') || 'Nenhuma'}
- Notas do utilizador: ${itemInfo.notes || 'Nenhuma'}

INSTRU√á√ïES CR√çTICAS:
1. **AUTO-PREENCHIMENTO**: Gera automaticamente TODOS os campos necess√°rios
2. **CATEGORIA**: Escolhe a categoria MAIS ESPEC√çFICA da lista dispon√≠vel
3. **COR**: Identifica a cor PRINCIPAL/DOMINANTE da lista dispon√≠vel
4. **NOME/ID**: Cria um nome curto, descritivo e √∫til para cataloga√ß√£o
5. **TAGS**: Sugere 3-5 tags relevantes da lista dispon√≠vel
6. **METADATA**: Descri√ß√£o t√©cnica detalhada para futuras an√°lises

FORMATO DE RESPOSTA OBRIGAT√ìRIO (JSON v√°lido):
{
  "formData": {
    "name": "string - Nome curto e descritivo da pe√ßa (ex: 'Camisa Azul Formal', 'Hoodie Cinzento Nike')",
    "category": "string - Categoria EXATA da lista dispon√≠vel",
    "color": "string - Cor EXATA da lista dispon√≠vel", 
    "brand": "string - Marca identificada ou 'N√£o identificada'",
    "suggestedTags": ["array", "de", "tags", "sugeridas"],
    "notes": "string - Notas autom√°ticas sobre a pe√ßa"
  },
  "aiMetadata": "string - Descri√ß√£o t√©cnica detalhada da pe√ßa (100-150 palavras) incluindo: tipo exato, caracter√≠sticas visuais detalhadas, materiais aparentes, detalhes construtivos, estilo e versatilidade, potencial de combina√ß√£o, cuidados recomendados. Esta informa√ß√£o ser√° usada para recomenda√ß√µes autom√°ticas de combina√ß√µes.",
  "confidence": {
    "category": "number 1-10 - Confian√ßa na categoria escolhida",
    "color": "number 1-10 - Confian√ßa na cor identificada",
    "overall": "number 1-10 - Confian√ßa geral na an√°lise"
  }
}

IMPORTANTE: 
- Responde APENAS com o JSON v√°lido, sem texto adicional
- Escolhe sempre uma categoria da lista dispon√≠vel
- Escolhe sempre uma cor da lista dispon√≠vel
- Cria um nome pr√°tico e identific√°vel
- A metadata deve ser rica em detalhes para futuras an√°lises

EXEMPLO de nome bem criado: "Blazer Preto Formal", "Jeans Azul Escuro Casual", "T√©nis Brancos Nike"`;

      const messages = [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: prompt
            },
            {
              type: 'image_url',
              image_url: {
                url: imageData
              }
            }
          ]
        }
      ];

      console.log('üîÑ Gerando metadata completa com auto-preenchimento para:', itemInfo.name);
      const response = await callOpenAI(messages, true); // true para incluir vision
      
      try {
        // Tentar extrair JSON da resposta
        const jsonMatch = response.match(/\{[\s\S]*\}/);
        if (!jsonMatch) {
          throw new Error('Resposta n√£o cont√©m JSON v√°lido');
        }
        
        const analysis = JSON.parse(jsonMatch[0]);
        
        // Validar estrutura da resposta
        if (!analysis.formData || !analysis.aiMetadata) {
          throw new Error('Estrutura de resposta inv√°lida');
        }
        
        // Adicionar √† hist√≥ria de an√°lises
        const analysisEntry = {
          id: Date.now(),
          itemName: analysis.formData.name,
          timestamp: new Date().toISOString(),
          metadata: analysis.aiMetadata.substring(0, 200) + '...'
        };
        
        setAnalysisHistory(prev => [analysisEntry, ...prev.slice(0, 9)]);
        
        console.log('‚úÖ Metadata completa gerada com sucesso:', analysis);
        return analysis;
        
      } catch (parseError) {
        console.error('üí• Erro ao parsear resposta JSON:', parseError);
        console.log('üîç Resposta recebida:', response);
        
        // Fallback: retornar dados b√°sicos
        return {
          formData: {
            name: itemInfo.name || 'Pe√ßa Nova',
            category: availableCategories[0] || 'T-shirts',
            color: 'Preto',
            brand: 'N√£o identificada',
            suggestedTags: ['casual'],
            notes: 'Adicionado automaticamente'
          },
          aiMetadata: response.substring(0, 500),
          confidence: {
            category: 5,
            color: 5,
            overall: 5
          }
        };
      }
      
    } catch (error) {
      console.error('üí• Erro ao gerar metadata completa:', error);
      throw error;
    } finally {
      setIsAnalyzing(false);
    }
  };

  // Fun√ß√£o original mantida para compatibilidade
  const generateGarmentMetadata = async (imageData, itemInfo = {}) => {
    if (!OPENAI_API_KEY) {
      throw new Error('API key da OpenAI n√£o configurada no sistema');
    }

    if (!imageData) {
      throw new Error('Imagem da pe√ßa √© obrigat√≥ria');
    }

    setIsAnalyzing(true);
    
    try {
      const prompt = `Como especialista em an√°lise de vestu√°rio e moda, analisa esta imagem de uma pe√ßa de roupa e gera uma descri√ß√£o detalhada e metadata para cataloga√ß√£o digital.

INFORMA√á√ïES FORNECIDAS PELO UTILIZADOR:
- Nome: ${itemInfo.name || 'N√£o especificado'}
- Categoria: ${itemInfo.category || 'N√£o especificada'}
- Cor: ${itemInfo.color || 'N√£o especificada'}
- Marca: ${itemInfo.brand || 'N√£o especificada'}
- Tags: ${itemInfo.tags?.join(', ') || 'Nenhuma'}
- Notas do utilizador: ${itemInfo.notes || 'Nenhuma'}

AN√ÅLISE REQUERIDA:
Cria uma descri√ß√£o completa e t√©cnica da pe√ßa que inclua:

1. **IDENTIFICA√á√ÉO E TIPO**: Que tipo de pe√ßa √© exatamente (camisa social, t-shirt b√°sica, cal√ßas de ganga, etc.)
2. **CARACTER√çSTICAS VISUAIS DETALHADAS**: 
   - Cores exatas e nuances observadas
   - Padr√µes (liso, listrado, estampado, etc.)
   - Texturas aparentes do tecido
   - Acabamentos e detalhes decorativos
3. **AN√ÅLISE DE MATERIAIS E CONSTRU√á√ÉO**:
   - Tipo de tecido aparente (algod√£o, poli√©ster, mistura, etc.)
4. **DETALHES CONSTRUTIVOS E FUNCIONAIS**:
   - Tipo de costuras e acabamentos
   - Bot√µes, fechos, z√≠peres
   - Bolsos
   - Gola, decote, mangas (se aplic√°vel)
   - Corte e silhueta
6. **AN√ÅLISE DE ESTILO E VERSATILIDADE**:
   - Estilo espec√≠fico (casual, formal, desportivo, etc.)
   - N√≠vel de formalidade
7. **POTENCIAL DE COMBINA√á√ÉO**:
   - Tipos de pe√ßas que combinam bem
   - Estilos de looks poss√≠veis
   - Acess√≥rios que complementam
   - Cores que harmonizam
8. **CUIDADOS E MANUTEN√á√ÉO RECOMENDADOS**:
   - Instru√ß√µes de lavagem aparentes
   - Cuidados especiais necess√°rios
   - Dicas de conserva√ß√£o

IMPORTANTE: Esta informa√ß√£o ser√° usada para cataloga√ß√£o digital e recomenda√ß√µes autom√°ticas de combina√ß√µes por isso descreve de forma curta, objetiva mas com a informa√ß√£o relevante para outros prompts futuros como outfits se combina com o estilo de corpo etc.

FORMATO DE RESPOSTA: Texto corrido descritivo, sem listas ou bullets. M√°ximo 150 palavras.`;

      const messages = [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: prompt
            },
            {
              type: 'image_url',
              image_url: {
                url: imageData
              }
            }
          ]
        }
      ];

      console.log('üîÑ Gerando metadata AI para pe√ßa:', itemInfo.name);
      const metadata = await callOpenAI(messages, true); // true para incluir vision
      
      // Adicionar √† hist√≥ria de an√°lises
      const analysisEntry = {
        id: Date.now(),
        itemName: itemInfo.name,
        timestamp: new Date().toISOString(),
        metadata: metadata.substring(0, 200) + '...' // Preview
      };
      
      setAnalysisHistory(prev => [analysisEntry, ...prev.slice(0, 9)]); // Manter √∫ltimas 10
      
      console.log('‚úÖ Metadata AI gerada com sucesso');
      return metadata;
      
    } catch (error) {
      console.error('üí• Erro ao gerar metadata AI:', error);
      throw error;
    } finally {
      setIsAnalyzing(false);
    }
  };

  const analyzeOutfitCombination = async (selectedItems, occasion = null, userProfile = {}) => {
    if (!OPENAI_API_KEY) {
      throw new Error('API key da OpenAI n√£o configurada no sistema');
    }

    if (!selectedItems || selectedItems.length === 0) {
      throw new Error('Seleciona pelo menos uma pe√ßa para an√°lise');
    }

    setIsAnalyzing(true);
    
    try {
      const genderContext = userProfile?.gender ? `
PERFIL DO UTILIZADOR:
- G√™nero: ${userProfile.gender}

AN√ÅLISE DE COMBINA√á√ÉO POR G√äNERO:
${userProfile.gender === 'female' ? `
- FOCAR: Styling feminino, coordination com accessories femininos
- INCLUIR: Como otimizar feminilidade, propor√ß√µes femininas
- AVALIAR: Adequa√ß√£o a contextos e dress codes femininos
- SUGERIR: Acess√≥rios femininos (joias, carteiras, sapatos)
` : userProfile.gender === 'male' ? `
- FOCAR: Styling masculino, coordination profissional masculina
- INCLUIR: Como otimizar sophistication masculina, dress codes
- AVALIAR: Adequa√ß√£o a contextos profissionais e masculinos
- SUGERIR: Acess√≥rios masculinos (rel√≥gios, cintos, sapatos formais)
` : `
- FOCAR: Styling neutro e inclusivo
- INCLUIR: Versatilidade para diferentes express√µes de g√™nero
`}
` : '';

      const prompt = `Como consultor de moda expert, analisa esta combina√ß√£o de pe√ßas para criar um outfit.

${genderContext}

PE√áAS SELECIONADAS:
${selectedItems.map(item => `- ${item.name} (${item.category}, ${item.color}${item.brand ? ', ' + item.brand : ''})`).join('\n')}

OCASI√ÉO: ${occasion || 'Casual'}

AN√ÅLISE COMPLETA:
1. **HARMONIA GERAL**: Como as pe√ßas funcionam juntas
2. **ADEQUA√á√ÉO √Ä OCASI√ÉO**: Se √© apropriado para o contexto
3. **ESTILO RESULTANTE**: Que tipo de look cria
4. **PONTOS FORTES**: O que funciona bem na combina√ß√£o
5. **MELHORIAS SUGERIDAS**: Como otimizar o look
6. **ACESS√ìRIOS RECOMENDADOS**: Que acess√≥rios completariam
7. **SCORE FINAL**: Nota de 1-10 para a combina√ß√£o

Resposta em formato estruturado mas leg√≠vel.`;

      const analysis = await callOpenAI([
        {
          role: 'system',
          content: '√âs um consultor de moda profissional especializado em an√°lise de combina√ß√µes de roupa.'
        },
        {
          role: 'user',
          content: prompt
        }
      ]);

      console.log('‚úÖ An√°lise de combina√ß√£o conclu√≠da');
      return analysis;
      
    } catch (error) {
      console.error('üí• Erro na an√°lise de combina√ß√£o:', error);
      throw error;
    } finally {
      setIsAnalyzing(false);
    }
  };

  // Fun√ß√£o de an√°lise r√°pida mantida
  const performQuickAnalysis = async (imageData, wardrobe = [], outfits = [], userProfile = {}) => {
    if (!OPENAI_API_KEY) {
      throw new Error('API key da OpenAI n√£o configurada no sistema');
    }

    setIsAnalyzing(true);
    
    try {
      // Usar a nova fun√ß√£o de metadata completa
      const result = await generateGarmentMetadataWithFormData(imageData, userProfile, {});
      
      // Adicionar an√°lise de compatibilidade com arm√°rio existente
      if (wardrobe.length > 0) {
        const compatibilityPrompt = `Baseado nesta nova pe√ßa identificada como "${result.formData.name}" (${result.formData.category}, ${result.formData.color}), analisa rapidamente a compatibilidade com o arm√°rio existente:

ARM√ÅRIO ATUAL:
${wardrobe.slice(0, 10).map(item => `- ${item.name} (${item.category}, ${item.color})`).join('\n')}

Responde em 2-3 frases: vale a pena adicionar? Que pe√ßas combinaria melhor?`;

        const compatibilityAnalysis = await callOpenAI([
          {
            role: 'user',
            content: compatibilityPrompt
          }
        ]);

        result.compatibilityAnalysis = compatibilityAnalysis;
      }

      console.log('‚úÖ An√°lise r√°pida conclu√≠da');
      return result;
      
    } catch (error) {
      console.error('üí• Erro na an√°lise r√°pida:', error);
      throw error;
    } finally {
      setIsAnalyzing(false);
    }
  };

  const batchAnalyzeCompatibility = async (wardrobe, userProfile = {}) => {
    if (!OPENAI_API_KEY) {
      throw new Error('API key da OpenAI n√£o configurada no sistema');
    }

    if (!wardrobe || wardrobe.length === 0) {
      throw new Error('Arm√°rio vazio para an√°lise');
    }

    setIsAnalyzing(true);
    
    try {
      const genderContext = userProfile?.gender ? `
PERFIL DO UTILIZADOR:
- G√™nero: ${userProfile.gender}

RECOMENDA√á√ÉO POR G√äNERO:
${userProfile.gender === 'female' ? `
- CONSIDERAR: Se a pe√ßa se adequa ao guarda-roupa feminino existente
- AVALIAR: Versatilidade para ocasi√µes femininas
- COMBINAR: Com que pe√ßas femininas do arm√°rio funcionaria melhor
- STYLING: Como estilizar femininely
` : userProfile.gender === 'male' ? `
- CONSIDERAR: Se a pe√ßa se adequa ao guarda-roupa masculino existente
- AVALIAR: Versatilidade para contextos masculinos
- COMBINAR: Com que pe√ßas masculinas do arm√°rio funcionaria melhor
- STYLING: Como estilizar masculinely
` : `
- CONSIDERAR: Versatilidade neutra da pe√ßa
- AVALIAR: Adequa√ß√£o a diferentes express√µes de g√™nero
`}
` : '';

      const prompt = `Como personal stylist expert, analisa todas as pe√ßas deste arm√°rio e d√° recomenda√ß√µes de compatibilidade.

${genderContext}

ARM√ÅRIO COMPLETO (${wardrobe.length} pe√ßas):
${wardrobe.map((item, index) => 
  `${index + 1}. ${item.name} (${item.category}, ${item.color}${item.brand ? ', ' + item.brand : ''})${item.aiMetadata ? ' - ' + item.aiMetadata.substring(0, 100) + '...' : ''}`
).join('\n')}

Para cada pe√ßa, fornece:
1. **SCORE (1-10)** - baseado na compatibilidade geral
2. **COMPATIBILIDADE COR** - se harmoniza com outras pe√ßas
3. **VERSATILIDADE** - quantos looks diferentes permite
4. **RECOMENDA√á√ÉO** - manter, otimizar uso, ou considerar substituir

Responde de forma estruturada para cada pe√ßa.`;

      const analysis = await callOpenAI([
        {
          role: 'system',
          content: '√âs um personal stylist especializado em an√°lise de arm√°rios e compatibilidade de pe√ßas.'
        },
        {
          role: 'user',
          content: prompt
        }
      ]);
      
      console.log('‚úÖ An√°lise batch de compatibilidade conclu√≠da');
      return analysis;
      
    } catch (error) {
      console.error('üí• Erro na an√°lise batch:', error);
      throw error;
    } finally {
      setIsAnalyzing(false);
    }
  };

  return {
    generateGarmentMetadata,
    generateGarmentMetadataWithFormData, // NOVA FUN√á√ÉO PRINCIPAL
    analyzeOutfitCombination,
    performQuickAnalysis,
    batchAnalyzeCompatibility,
    isAnalyzing,
    analysisHistory
  };
};