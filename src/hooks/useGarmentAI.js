import { useState } from 'react';
import { useOpenAI } from './useOpenAI';
import { OPENAI_API_KEY } from '../utils/constants';

export const useGarmentAI = () => {
  const { callOpenAI } = useOpenAI();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisHistory, setAnalysisHistory] = useState([]);

  const generateGarmentMetadata = async (imageData, itemInfo = {}) => {
    if (!OPENAI_API_KEY) {
      throw new Error('API key da OpenAI n√£o configurada no sistema');
    }

    if (!imageData) {
      throw new Error('Imagem da pe√ßa √© obrigat√≥ria');
    }

    setIsAnalyzing(true);
    
    try {
      const prompt = `Como especialista em an√°lise de vestu√°rio e moda, analisa esta imagem de uma pe√ßa de roupa e gera uma descri√ß√£o detalhada e metadata para cataloga√ß√£o digital.

INFORMA√á√ïES FORNECIDAS PELO UTILIZADOR:
- Nome: ${itemInfo.name || 'N√£o especificado'}
- Categoria: ${itemInfo.category || 'N√£o especificada'}
- Cor: ${itemInfo.color || 'N√£o especificada'}
- Marca: ${itemInfo.brand || 'N√£o especificada'}
- Estado: ${itemInfo.condition || 'N√£o especificado'}
- Tags: ${itemInfo.tags?.join(', ') || 'Nenhuma'}
- Notas do utilizador: ${itemInfo.notes || 'Nenhuma'}

AN√ÅLISE REQUERIDA:
Cria uma descri√ß√£o completa e t√©cnica da pe√ßa que inclua:

1. **IDENTIFICA√á√ÉO E TIPO**: Que tipo de pe√ßa √© exatamente (camisa social, t-shirt b√°sica, cal√ßas de ganga, etc.)
2. **CARACTER√çSTICAS VISUAIS DETALHADAS**: 
   - Cores exatas e nuances observadas
   - Padr√µes (liso, listrado, estampado, etc.)
   - Texturas aparentes do tecido
   - Acabamentos e detalhes decorativos
3. **AN√ÅLISE DE MATERIAIS E CONSTRU√á√ÉO**:
   - Tipo de tecido aparente (algod√£o, poli√©ster, mistura, etc.)
   - Peso e caimento do tecido
   - Qualidade de constru√ß√£o observada
4. **DETALHES CONSTRUTIVOS E FUNCIONAIS**:
   - Tipo de costuras e acabamentos
   - Bot√µes, fechos, z√≠peres
   - Bolsos (quantos, tipo, localiza√ß√£o)
   - Gola, decote, mangas (se aplic√°vel)
   - Corte e silhueta
5. **AVALIA√á√ÉO DE ESTADO**:
   - Condi√ß√£o visual geral
   - Sinais de desgaste, se vis√≠veis
   - Qualidade de conserva√ß√£o
6. **AN√ÅLISE DE ESTILO E VERSATILIDADE**:
   - Estilo espec√≠fico (casual, formal, desportivo, etc.)
   - Ocasi√µes apropriadas para uso
   - Esta√ß√£o do ano mais adequada
   - N√≠vel de formalidade
7. **POTENCIAL DE COMBINA√á√ÉO**:
   - Tipos de pe√ßas que combinam bem
   - Estilos de looks poss√≠veis
   - Acess√≥rios que complementam
   - Cores que harmonizam
8. **CUIDADOS E MANUTEN√á√ÉO RECOMENDADOS**:
   - Instru√ß√µes de lavagem aparentes
   - Cuidados especiais necess√°rios
   - Dicas de conserva√ß√£o

IMPORTANTE: S√™ muito detalhado e t√©cnico na an√°lise. Esta informa√ß√£o ser√° usada para cataloga√ß√£o digital e recomenda√ß√µes autom√°ticas de combina√ß√µes.

Formato da resposta: Texto corrido, bem estruturado, com todas as observa√ß√µes t√©cnicas relevantes.`;

      const messages = [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: prompt
            },
            {
              type: 'image_url',
              image_url: {
                url: imageData,
                detail: 'high'
              }
            }
          ]
        }
      ];

      const analysis = await callOpenAI(messages, true);
      
      // Add to analysis history
      const historyEntry = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        itemInfo,
        analysis,
        imageData: imageData.substring(0, 100) + '...' // Store just a reference
      };
      
      setAnalysisHistory(prev => [historyEntry, ...prev.slice(0, 9)]); // Keep last 10
      
      return analysis;
      
    } catch (error) {
      console.error('üî• Garment AI Analysis Error:', error);
      throw error;
    } finally {
      setIsAnalyzing(false);
    }
  };

  const generateStyleTags = async (imageData, description = '') => {
    if (!OPENAI_API_KEY) {
      throw new Error('API key da OpenAI n√£o configurada no sistema');
    }

    try {
      const prompt = `Analisa esta pe√ßa de roupa e gera tags de estilo relevantes.

${description ? `DESCRI√á√ÉO EXISTENTE: ${description}` : ''}

Com base na imagem, gera uma lista de tags que descrevam:
- Estilo (casual, formal, boho, minimalist, etc.)
- Ocasi√µes apropriadas (work, party, weekend, etc.)
- Caracter√≠sticas visuais (striped, floral, solid, etc.)
- Fit (oversized, fitted, loose, etc.)
- Vibe (comfy, elegant, edgy, romantic, etc.)

Responde apenas com uma lista de tags separadas por v√≠rgulas, m√°ximo 10 tags, em portugu√™s.
Exemplo: casual, confort√°vel, fim-de-semana, algod√£o, b√°sico, vers√°til`;

      const messages = [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: prompt
            },
            {
              type: 'image_url',
              image_url: {
                url: imageData,
                detail: 'low'
              }
            }
          ]
        }
      ];

      const response = await callOpenAI(messages, true);
      return response.split(',').map(tag => tag.trim()).filter(tag => tag.length > 0);
      
    } catch (error) {
      console.error('üè∑Ô∏è Style Tags Generation Error:', error);
      throw error;
    }
  };

  const suggestItemCombinations = async (targetItem, wardrobeItems) => {
    if (!OPENAI_API_KEY) {
      throw new Error('API key da OpenAI n√£o configurada no sistema');
    }

    try {
      const prompt = `Como especialista em styling, sugere combina√ß√µes para esta pe√ßa espec√≠fica:

PE√áA PRINCIPAL:
- Nome: ${targetItem.name}
- Categoria: ${targetItem.category}
- Cor: ${targetItem.color}
- Estilo: ${targetItem.tags?.join(', ') || 'N/A'}
${targetItem.aiMetadata ? `- An√°lise IA: ${targetItem.aiMetadata.substring(0, 200)}...` : ''}

OUTRAS PE√áAS DISPON√çVEIS NO ARM√ÅRIO:
${wardrobeItems.map(item => 
  `- ${item.name} (${item.category}, ${item.color}) - ${item.tags?.join(', ') || 'b√°sico'}`
).join('\n')}

Por favor, sugere 3-5 combina√ß√µes espec√≠ficas usando a pe√ßa principal com outras pe√ßas do arm√°rio.

Para cada combina√ß√£o, inclui:
1. Pe√ßas espec√≠ficas a usar
2. Ocasi√£o/contexto apropriado
3. Uma frase sobre porqu√™ funciona bem

Formato:
**Look 1 - [Nome do Look]**
Pe√ßas: [lista das pe√ßas]
Ocasi√£o: [contexto]
Porqu√™ funciona: [explica√ß√£o breve]

Foca em combina√ß√µes pr√°ticas e variadas!`;

      const response = await callOpenAI(prompt);
      return response;
      
    } catch (error) {
      console.error('üëî Combination Suggestions Error:', error);
      throw error;
    }
  };

  const analyzeWardrobeGaps = async (wardrobeItems, userPreferences = {}) => {
    if (!OPENAI_API_KEY) {
      throw new Error('API key da OpenAI n√£o configurada no sistema');
    }

    try {
      const prompt = `Como consultor de guarda-roupa, analisa este arm√°rio e identifica lacunas/oportunidades:

INVENT√ÅRIO ATUAL:
${wardrobeItems.map(item => 
  `- ${item.name} (${item.category}, ${item.color}) - ${item.condition || 'N/A'} - Tags: ${item.tags?.join(', ') || 'N/A'}`
).join('\n')}

ESTAT√çSTICAS:
- Total de pe√ßas: ${wardrobeItems.length}
- Categorias: ${[...new Set(wardrobeItems.map(i => i.category))].join(', ')}
- Cores principais: ${[...new Set(wardrobeItems.map(i => i.color))].slice(0, 5).join(', ')}

PREFER√äNCIAS DO UTILIZADOR:
${Object.entries(userPreferences).map(([k, v]) => `- ${k}: ${v}`).join('\n') || 'N√£o especificadas'}

Por favor, fornece:

1. **AN√ÅLISE GERAL**: Pontos fortes do guarda-roupa atual
2. **LACUNAS IDENTIFICADAS**: Que pe√ßas/categorias est√£o em falta
3. **OPORTUNIDADES**: Sugest√µes espec√≠ficas de compras priorit√°rias
4. **OTIMIZA√á√ÉO**: Como melhor usar o que j√° existe
5. **ESTRAT√âGIA**: Plano de m√©dio prazo para o guarda-roupa

S√™ espec√≠fico e pr√°tico nas recomenda√ß√µes!`;

      const response = await callOpenAI(prompt);
      return response;
      
    } catch (error) {
      console.error('üìä Wardrobe Analysis Error:', error);
      throw error;
    }
  };

  return {
    generateGarmentMetadata,
    generateStyleTags,
    suggestItemCombinations,
    analyzeWardrobeGaps,
    isAnalyzing,
    analysisHistory
  };
};