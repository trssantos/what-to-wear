import { useState } from 'react';
import { useOpenAI } from './useOpenAI';
import { OPENAI_API_KEY } from '../utils/constants';

export const useGarmentAI = () => {
  const { callOpenAI } = useOpenAI();
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysisHistory, setAnalysisHistory] = useState([]);

  const generateGarmentMetadata = async (imageData, itemInfo = {}) => {
    if (!OPENAI_API_KEY) {
      throw new Error('API key da OpenAI n√£o configurada no sistema');
    }

    if (!imageData) {
      throw new Error('Imagem da pe√ßa √© obrigat√≥ria');
    }

    setIsAnalyzing(true);
    
    try {
      const prompt = `Como especialista em an√°lise de vestu√°rio e moda, analisa esta imagem de uma pe√ßa de roupa e gera uma descri√ß√£o detalhada e metadata para cataloga√ß√£o digital.

INFORMA√á√ïES FORNECIDAS PELO UTILIZADOR:
- Nome: ${itemInfo.name || 'N√£o especificado'}
- Categoria: ${itemInfo.category || 'N√£o especificada'}
- Cor: ${itemInfo.color || 'N√£o especificada'}
- Marca: ${itemInfo.brand || 'N√£o especificada'}
- Tags: ${itemInfo.tags?.join(', ') || 'Nenhuma'}
- Notas do utilizador: ${itemInfo.notes || 'Nenhuma'}

AN√ÅLISE REQUERIDA:
Cria uma descri√ß√£o completa e t√©cnica da pe√ßa que inclua:

1. **IDENTIFICA√á√ÉO E TIPO**: Que tipo de pe√ßa √© exatamente (camisa social, t-shirt b√°sica, cal√ßas de ganga, etc.)
2. **CARACTER√çSTICAS VISUAIS DETALHADAS**: 
   - Cores exatas e nuances observadas
   - Padr√µes (liso, listrado, estampado, etc.)
   - Texturas aparentes do tecido
   - Acabamentos e detalhes decorativos
3. **AN√ÅLISE DE MATERIAIS E CONSTRU√á√ÉO**:
   - Tipo de tecido aparente (algod√£o, poli√©ster, mistura, etc.)
4. **DETALHES CONSTRUTIVOS E FUNCIONAIS**:
   - Tipo de costuras e acabamentos
   - Bot√µes, fechos, z√≠peres
   - Bolsos
   - Gola, decote, mangas (se aplic√°vel)
   - Corte e silhueta
6. **AN√ÅLISE DE ESTILO E VERSATILIDADE**:
   - Estilo espec√≠fico (casual, formal, desportivo, etc.)
   - N√≠vel de formalidade
7. **POTENCIAL DE COMBINA√á√ÉO**:
   - Tipos de pe√ßas que combinam bem
   - Estilos de looks poss√≠veis
   - Acess√≥rios que complementam
   - Cores que harmonizam
8. **CUIDADOS E MANUTEN√á√ÉO RECOMENDADOS**:
   - Instru√ß√µes de lavagem aparentes
   - Cuidados especiais necess√°rios
   - Dicas de conserva√ß√£o

IMPORTANTE: Esta informa√ß√£o ser√° usada para cataloga√ß√£o digital e recomenda√ß√µes autom√°ticas de combina√ß√µes por isso descreve de forma curta, objetiva mas com a informa√ß√£o relevante para outros prompts futuros como outfits se combina com o estilo de corpo etc.

FORMATO DE RESPOSTA: Texto corrido descritivo, sem listas ou bullets. M√°ximo 100 palavras.`;

      const messages = [
        {
          role: 'user',
          content: [
            {
              type: 'text',
              text: prompt
            },
            {
              type: 'image_url',
              image_url: {
                url: imageData
              }
            }
          ]
        }
      ];

      console.log('üîÑ Gerando metadata AI para pe√ßa:', itemInfo.name);
      const metadata = await callOpenAI(messages, true); // true para incluir vision
      
      // Adicionar √† hist√≥ria de an√°lises
      const analysisEntry = {
        id: Date.now(),
        itemName: itemInfo.name,
        timestamp: new Date().toISOString(),
        metadata: metadata.substring(0, 200) + '...' // Preview
      };
      
      setAnalysisHistory(prev => [analysisEntry, ...prev.slice(0, 9)]); // Manter √∫ltimas 10
      
      console.log('‚úÖ Metadata AI gerada com sucesso');
      return metadata;
      
    } catch (error) {
      console.error('üí• Erro ao gerar metadata AI:', error);
      throw error;
    } finally {
      setIsAnalyzing(false);
    }
  };

  const analyzeOutfitCombination = async (selectedItems, occasion = null) => {
    if (!OPENAI_API_KEY) {
      throw new Error('API key da OpenAI n√£o configurada no sistema');
    }

    if (!selectedItems || selectedItems.length === 0) {
      throw new Error('Seleciona pelo menos uma pe√ßa para an√°lise');
    }

    setIsAnalyzing(true);
    
    try {
      const itemDescriptions = selectedItems.map(item => 
        `${item.name} (${item.category}, ${item.color}${item.brand ? ', ' + item.brand : ''})`
      ).join(', ');

      const prompt = `Como especialista em styling e moda, analisa esta combina√ß√£o de roupas e fornece feedback detalhado:

PE√áAS SELECIONADAS: ${itemDescriptions}
OCASI√ÉO: ${occasion || 'N√£o especificada'}

Analisa a combina√ß√£o considerando:
1. **HARMONIA VISUAL**: Como as cores, padr√µes e texturas funcionam juntos
2. **ADEQUA√á√ÉO**: Se a combina√ß√£o √© apropriada para a ocasi√£o
3. **ESTILO GERAL**: Que estilo esta combina√ß√£o transmite
4. **SUGEST√ïES DE MELHORIA**: Pe√ßas que poderiam ser adicionadas ou trocadas
5. **ACESS√ìRIOS**: Que acess√≥rios complementariam o look
6. **DICAS DE STYLING**: Como usar as pe√ßas para potencializar o visual

S√™ espec√≠fico e construtivo no feedback.`;

      const analysis = await callOpenAI(prompt);
      console.log('‚úÖ An√°lise de combina√ß√£o conclu√≠da');
      return analysis;
      
    } catch (error) {
      console.error('üí• Erro na an√°lise de combina√ß√£o:', error);
      throw error;
    } finally {
      setIsAnalyzing(false);
    }
  };

  return {
    generateGarmentMetadata,
    analyzeOutfitCombination,
    isAnalyzing,
    analysisHistory
  };
};