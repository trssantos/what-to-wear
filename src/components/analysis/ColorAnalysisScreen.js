import React, { useState, useEffect } from 'react';
import { 
  ArrowLeft, Camera, Upload, Palette, Star, Info, CheckCircle, 
  RefreshCw, Zap, Sparkles, Heart, Crown, ShoppingBag, Lightbulb,
  Eye, Scissors, Target, XCircle
} from 'lucide-react';
import { useAppContext } from '../../contexts/AppContext';
import { useOpenAI } from '../../hooks/useOpenAI';
import CameraCapture from '../shared/CameraCapture';

const ColorAnalysisScreen = ({ navigateToScreen, openaiApiKey }) => {
  const { wardrobe, updateUserProfile, userProfile } = useAppContext();
  const { callOpenAI } = useOpenAI(openaiApiKey);
  
  const [step, setStep] = useState(1);
  const [faceImage, setFaceImage] = useState(null);
  const [showCamera, setShowCamera] = useState(false);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState(null);
  const [wardrobeAnalysis, setWardrobeAnalysis] = useState(null);
  const [mode, setMode] = useState('loading'); // Start with loading to check existing analysis
  const [isRevealed, setIsRevealed] = useState(false);
  const [hoveredCard, setHoveredCard] = useState(null);
  const [personalQuestions, setPersonalQuestions] = useState({
    skinTone: '',
    eyeColor: '',
    hairColor: '',
    preferredColors: [],
    dislikedColors: []
  });
  const [useLocalAnalysis, setUseLocalAnalysis] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => setIsRevealed(true), 300);
    return () => clearTimeout(timer);
  }, []);

  // Check for existing analysis on component mount
  useEffect(() => {
    console.log('üîç Verificando an√°lise existente...');
    console.log('üìã UserProfile:', userProfile);
    console.log('üé® ColorAnalysis:', userProfile?.colorAnalysis);
    
    if (userProfile?.colorAnalysis) {
      console.log('‚úÖ An√°lise existente encontrada:', userProfile.colorAnalysis.season);
      console.log('üìÖ Data da an√°lise:', userProfile.analyzedAt);
      setMode('results');
      setAnalysis(userProfile.colorAnalysis);
    } else {
      console.log('‚ùå Nenhuma an√°lise encontrada, iniciando nova an√°lise');
      setMode('check');
    }
  }, [userProfile]);

  const colorSeasons = {
    Spring: {
      colors: ['#FFB6C1', '#98FB98', '#F0E68C', '#DDA0DD', '#FFE4B5', '#87CEEB', '#FFA07A', '#DEB887'],
      emoji: 'üå∏',
      gradientFrom: 'from-pink-400',
      gradientTo: 'to-yellow-300',
      description: 'Cores quentes e claras com subtom dourado',
      characteristics: ['Pele quente com subtom dourado', 'Olhos claros e brilhantes', 'Cabelo louro, ruivo ou castanho claro'],
      bestColors: ['Coral', 'P√™ssego', 'Verde-claro', 'Amarelo-quente', 'Turquesa-claro', 'Rosa-salm√£o'],
      avoidColors: ['Preto-puro', 'Branco-gelo', 'Cores muito escuras', 'Azul-marinho-frio'],
      quickTips: ['Abra√ßa tons dourados', 'Evita cores muito frias', 'Brilha com corais e p√™ssegos'],
      makeupTips: 'Base com subtom dourado, blush coral, batom p√™ssego ou coral'
    },
    Summer: {
      colors: ['#E6E6FA', '#B0E0E6', '#F5DEB3', '#DDA0DD', '#FFB6C1', '#D8BFD8', '#AFEEEE', '#F0F8FF'],
      emoji: 'üåä',
      gradientFrom: 'from-blue-300',
      gradientTo: 'to-purple-200',
      description: 'Cores frias e suaves com subtom rosado',
      characteristics: ['Pele fria com subtom rosado', 'Olhos azuis, verdes ou avel√£', 'Cabelo louro-cinza, castanho-claro'],
      bestColors: ['Rosa-suave', 'Azul-beb√©', 'Lavanda', 'Cinza-claro', 'Branco-suave', 'Verde-menta'],
      avoidColors: ['Laranja-vibrante', 'Cores muito quentes', 'Dourado-intenso', 'Preto-intenso'],
      quickTips: ['Prefere tons frios', 'Suavidade √© a chave', 'Evita contrastes extremos'],
      makeupTips: 'Base com subtom rosado, blush rosa-suave, batom rosa ou berry suave'
    },
    Autumn: {
      colors: ['#D2691E', '#CD853F', '#B22222', '#DAA520', '#8B4513', '#A0522D', '#BC8F8F', '#F4A460'],
      emoji: 'üçÇ',
      gradientFrom: 'from-orange-500',
      gradientTo: 'to-red-600',
      description: 'Cores quentes e profundas com subtom dourado',
      characteristics: ['Pele quente com subtom dourado/p√™ssego', 'Olhos castanhos, verdes ou avel√£', 'Cabelo ruivo, castanho ou preto'],
      bestColors: ['Terracota', 'Mostarda', 'Verde-oliva', 'Borgonha', 'Dourado-profundo', 'Laranja-queimado'],
      avoidColors: ['Rosa-frio', 'Azul-royal', 'Preto-puro', 'Cores muito claras e frias'],
      quickTips: ['Rica em tons terrosos', 'Abra√ßa o dourado', 'Profundidade √© fundamental'],
      makeupTips: 'Base dourada, blush p√™ssego-profundo, batom terracota ou vermelho-quente'
    },
    Winter: {
      colors: ['#000000', '#FFFFFF', '#FF0000', '#0000FF', '#8B008B', '#FF1493', '#00CED1', '#32CD32'],
      emoji: '‚ùÑÔ∏è',
      gradientFrom: 'from-slate-600',
      gradientTo: 'to-blue-600',
      description: 'Cores frias e intensas com alto contraste',
      characteristics: ['Pele fria com subtom rosado/azul', 'Olhos escuros ou muito claros', 'Cabelo preto, castanho-escuro ou louro-platinado'],
      bestColors: ['Preto', 'Branco-puro', 'Vermelho-frio', 'Azul-royal', 'Rosa-choque', 'Verde-esmeralda'],
      avoidColors: ['Bege', 'Cores terrosas', 'Dourado-quente', 'Laranja'],
      quickTips: ['Contraste √© poder', 'Cores puras e intensas', 'Evita tons suaves'],
      makeupTips: 'Base com subtom frio, blush rosa-frio, batom vermelho-frio ou berry intenso'
    }
  };

  const skinToneOptions = ['Muito clara', 'Clara', 'M√©dia', 'Morena', 'Escura'];
  const eyeColorOptions = ['Azul', 'Verde', 'Castanho', 'Avel√£', 'Cinza', 'Preto'];
  const hairColorOptions = ['Louro', 'Ruivo', 'Castanho claro', 'Castanho escuro', 'Preto', 'Grisalho'];
  const commonColors = ['Vermelho', 'Rosa', 'Laranja', 'Amarelo', 'Verde', 'Azul', 'Roxo', 'Preto', 'Branco', 'Cinza'];

  // Reset analysis
  const resetAnalysis = () => {
    setStep(1);
    setFaceImage(null);
    setAnalysis(null);
    setWardrobeAnalysis(null);
    setMode('check');
    setPersonalQuestions({
      skinTone: '',
      eyeColor: '',
      hairColor: '',
      preferredColors: [],
      dislikedColors: []
    });
  };

  // Image handling
  const handleImageUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        setFaceImage(e.target.result);
        setStep(2);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleCameraCapture = (photoDataUrl) => {
    setFaceImage(photoDataUrl);
    setShowCamera(false);
    setStep(2);
  };

  // Form handling
  const handlePersonalQuestionsSubmit = () => {
    setStep(3);
    performColorAnalysis();
  };

  const toggleColorPreference = (color, type) => {
    setPersonalQuestions(prev => ({
      ...prev,
      [type]: prev[type].includes(color) 
        ? prev[type].filter(c => c !== color)
        : [...prev[type], color]
    }));
  };

  // AI Analysis
  const performColorAnalysis = async () => {
    setIsAnalyzing(true);
    
    // If user chose local analysis, skip AI
    if (useLocalAnalysis) {
      console.log('üè† Usando an√°lise local por escolha do utilizador');
      const fallbackSeason = determineFallbackSeason();
      const fallbackData = createFallbackAnalysis(fallbackSeason);
      const validatedData = validateAndNormalizeAnalysis(fallbackData);
      
      setAnalysis(validatedData);
      
      // Save fallback analysis to user profile with detailed logging
      console.log('üíæ Guardando an√°lise fallback no perfil...');
      const profileUpdate = {
        colorSeason: validatedData.season,
        colorAnalysis: validatedData,
        analyzedAt: new Date().toISOString(),
        analysisType: 'local' // Flag to indicate local analysis
      };
      console.log('üì§ Dados fallback a guardar:', profileUpdate);
      
      await updateUserProfile(profileUpdate);
      console.log('‚úÖ An√°lise fallback guardada com sucesso!');
      
      alert(`An√°lise conclu√≠da com sistema inteligente local (${fallbackSeason})! ‚ú®`);
      setStep(3);
      setIsAnalyzing(false);
      return;
    }
    
    try {
      
      let response;
      if (faceImage) {
        // Ultra-simplified, technical color theory prompt
        const imagePrompt = `CONSULTORIA DE TEORIA DAS CORES

Como especialista em design de cores e styling, preciso de uma recomenda√ß√£o t√©cnica de paleta de cores baseada na teoria das 4 esta√ß√µes a partir da an√°lise da imagem, tom de pele, cor dos olhos, cor de cabelo, outras features que consideres relevantes.
Adiciona uma justifica√ß√£o de que caracteristicas consideraste para justificar este resultado.
DISCLAIMER: Esta √© uma consultoria puramente est√©tica de styling e teoria das cores, n√£o uma an√°lise m√©dica ou f√≠sica.


TEORIA DAS 4 ESTA√á√ïES (DESIGN):
- SPRING: Paleta quente-clara
- SUMMER: Paleta fria-suave
- AUTUMN: Paleta quente-profunda
- WINTER: Paleta fria-intensa

OBJETIVO: Determinar qual das 4 paletas de design oferece melhor harmonia crom√°tica.

RESPOSTA REQUERIDA EM JSON:
{
  "season": "Spring",
  "confidence": 85,
  "justification": "Harmonia crom√°tica baseada em teoria das cores",
  "personalizedPalette": ["#FFB6C1", "#98FB98", "#F0E68C", "#DDA0DD", "#FFE4B5", "#87CEEB"],
  "wardrobeScores": [{"itemId": "1", "name": "item", "score": 7, "reasoning": "compatibilidade crom√°tica"}],
  "recommendations": {
    "addColors": ["Coral", "P√™ssego"],
    "avoidColors": ["Preto-puro"],
    "makeupTips": "Teoria das cores aplicada",
    "stylingTips": "Harmonia crom√°tica"
  },
  "suggestedCombinations": ["Coral com neutros"]
}`;

        // Try multiple approaches
        const models = ['gpt-4o', 'gpt-4-turbo'];
        let lastError = null;

        for (const model of models) {
          try {
            console.log(`üîÑ Tentando modelo: ${model}`);
            
            const requestBody = {
              model: model,
              messages: [
                {
                  role: 'system',
                  content: '√âs um especialista em design de cores e teoria crom√°tica. Forneces consultoria t√©cnica sobre paletas de cores para styling. N√£o fazes an√°lises m√©dicas ou f√≠sicas. RESPONDE APENAS EM JSON V√ÅLIDO.'
                },
                {
                  role: 'user',
                  content: [
                    {
                      type: 'text',
                      text: imagePrompt
                    },
                    {
                      type: 'image_url',
                      image_url: {
                        url: faceImage,
                        detail: 'low' // Use low detail to reduce processing
                      }
                    }
                  ]
                }
              ],
              max_tokens: 2000,
              temperature: 0.3, // More deterministic
              response_format: { type: "json_object" } // Force JSON response
            };

            const apiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${openaiApiKey}`
              },
              body: JSON.stringify(requestBody)
            });

            if (!apiResponse.ok) {
              const errorData = await apiResponse.json().catch(() => ({}));
              throw new Error(`API ${apiResponse.status}: ${errorData.error?.message || 'Erro desconhecido'}`);
            }

            const data = await apiResponse.json();
            response = data.choices[0].message.content;
            
            console.log(`‚úÖ Sucesso com modelo: ${model}`);
            break; // Success, exit loop

          } catch (modelError) {
            console.log(`‚ùå Falha com modelo ${model}:`, modelError.message);
            lastError = modelError;
            continue; // Try next model
          }
        }

        // If all models failed, try text-only fallback
        if (!response) {
          console.log('üîÑ Todos os modelos de vis√£o falharam, tentando text-only...');
          throw lastError || new Error('Todos os modelos falharam');
        }

      } else {
        // Text-only technical consultation  
        const textPrompt = `CONSULTORIA T√âCNICA DE TEORIA DAS CORES

Como especialista em design crom√°tico e styling t√©cnico, fornece uma consultoria sobre paletas de cores.

DISCLAIMER: Consultoria puramente est√©tica baseada em teoria das cores, n√£o an√°lise m√©dica.

PREFER√äNCIAS EST√âTICAS:
- Tonalidade preferida: ${personalQuestions.skinTone}
- Crom√°tica desejada para olhos: ${personalQuestions.eyeColor}  
- Estilo de cabelo: ${personalQuestions.hairColor}
- Cores favoritas: ${personalQuestions.preferredColors.join(', ') || 'N√£o especificado'}
- Cores evitadas: ${personalQuestions.dislikedColors.join(', ') || 'N√£o especificado'}

PE√áAS DO GUARDA-ROUPA (${Math.min(wardrobe.length, 8)} de ${wardrobe.length}):
${wardrobe.slice(0, 8).map((item, index) => `${index + 1}. ${item.name} (${item.color || 'sem cor'})`).join('\n')}

SISTEMA DE CLASSIFICA√á√ÉO CROM√ÅTICA:
SPRING: Temperatura quente + Claridade alta + Satura√ß√£o m√©dia
SUMMER: Temperatura fria + Claridade alta + Satura√ß√£o baixa  
AUTUMN: Temperatura quente + Claridade baixa + Satura√ß√£o alta
WINTER: Temperatura fria + Claridade vari√°vel + Satura√ß√£o alta

RESPOSTA T√âCNICA EM JSON:
{
  "season": "Spring",
  "confidence": 85,
  "justification": "An√°lise baseada em teoria crom√°tica e prefer√™ncias est√©ticas",
  "personalizedPalette": ["#FFB6C1", "#98FB98", "#F0E68C", "#DDA0DD", "#FFE4B5", "#87CEEB"],
  "wardrobeScores": [{"itemId": "1", "name": "item", "score": 7, "reasoning": "compatibilidade t√©cnica"}],
  "recommendations": {
    "addColors": ["Coral", "P√™ssego"],
    "avoidColors": ["Preto-intenso"],
    "makeupTips": "Aplica√ß√£o t√©cnica de teoria das cores",
    "stylingTips": "Harmonia crom√°tica baseada em temperatura"
  },
  "suggestedCombinations": ["Combina√ß√£o 1", "Combina√ß√£o 2"]
}`;

        try {
          const requestBody = {
            model: 'gpt-4o-mini',
            messages: [
              {
                role: 'system',
                content: '√âs um especialista t√©cnico em design de cores e teoria crom√°tica para styling. Forneces consultoria sobre paletas de cores baseada em princ√≠pios cient√≠ficos de cor. RESPONDE SEMPRE EM JSON V√ÅLIDO.'
              },
              {
                role: 'user',
                content: textPrompt
              }
            ],
            max_tokens: 1500,
            temperature: 0.3,
            response_format: { type: "json_object" }
          };

          const apiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${openaiApiKey}`
            },
            body: JSON.stringify(requestBody)
          });

          if (!apiResponse.ok) {
            const errorData = await apiResponse.json().catch(() => ({}));
            throw new Error(`API ${apiResponse.status}: ${errorData.error?.message || 'Erro desconhecido'}`);
          }

          const data = await apiResponse.json();
          response = data.choices[0].message.content;

        } catch (textError) {
          console.log('‚ùå Erro na an√°lise text-only:', textError.message);
          throw textError;
        }
      }

      // Enhanced refusal detection with detailed logging
      console.log('üîç Verificando resposta da IA...');
      console.log('üìä Tamanho da resposta:', response.length);
      console.log('üî§ Primeiros 100 caracteres:', response.substring(0, 100));
      
      const refusalPatterns = [
        "i can't", "i cannot", "sorry", "i'm not able", "i'm unable",
        "n√£o posso", "desculpa", "n√£o consigo", "unable to", "can't help",
        "i apologize", "i'm sorry", "cannot provide", "can't provide",
        "not appropriate", "not comfortable", "policy", "guidelines"
      ];
      
      const responseText = response.toLowerCase();
      const hasRefusal = refusalPatterns.some(pattern => {
        const found = responseText.includes(pattern);
        if (found) {
          console.log(`üö´ Padr√£o de recusa encontrado: "${pattern}"`);
        }
        return found;
      });
      
      if (hasRefusal) {
        throw new Error('IA recusou an√°lise - padr√£o de recusa detectado');
      }
      
      if (response.length < 50) {
        throw new Error('IA forneceu resposta muito curta');
      }
      
      // Check if response looks like JSON
      if (!response.includes('{') || !response.includes('}')) {
        console.log('‚ö†Ô∏è Resposta n√£o parece conter JSON v√°lido');
        throw new Error('IA n√£o forneceu resposta em JSON');
      }
      
      console.log('‚úÖ Resposta passou na valida√ß√£o inicial')

      // Parse JSON response with improved error handling
      console.log('üîç Resposta recebida da IA (primeiros 200 chars):', response.substring(0, 200));
      console.log('üîç Resposta completa length:', response.length);
      
      let analysisData;
      try {
        // Clean the response first
        const cleanedResponse = response.trim();
        console.log('üßπ Resposta limpa (primeiros 100 chars):', cleanedResponse.substring(0, 100));
        
        // Additional check for common refusal patterns
        const refusalPatterns = [
          "i can't", "i cannot", "sorry", "i'm not able", "i'm unable",
          "n√£o posso", "desculpa", "n√£o consigo", "unable to", "can't help",
          "i apologize", "cannot provide", "not appropriate", "against policy"
        ];
        
        const hasRefusal = refusalPatterns.some(pattern => 
          cleanedResponse.toLowerCase().includes(pattern)
        );
        
        if (hasRefusal || cleanedResponse.length < 50) {
          console.log('üö´ Padr√£o de recusa detectado na resposta');
          console.log('üìù Resposta problem√°tica:', cleanedResponse.substring(0, 200));
          throw new Error('IA recusou an√°lise - padr√£o detectado');
        }
        
        // Enhanced JSON extraction
        let jsonMatch = null;
        
        // Try different JSON extraction strategies
        const strategies = [
          // Strategy 1: Basic regex
          () => cleanedResponse.match(/\{[\s\S]*\}/),
          
          // Strategy 2: JSON code blocks  
          () => cleanedResponse.match(/```json\s*(\{[\s\S]*?\})\s*```/),
          
          // Strategy 3: Look for season field specifically
          () => cleanedResponse.match(/\{\s*"season"[\s\S]*?\}(?=\s*$|\s*\n|$)/),
          
          // Strategy 4: Try to find complete JSON object
          () => {
            const start = cleanedResponse.indexOf('{');
            const end = cleanedResponse.lastIndexOf('}');
            if (start !== -1 && end !== -1 && end > start) {
              return [cleanedResponse.substring(start, end + 1)];
            }
            return null;
          },
          
          // Strategy 5: Force parse if response looks like partial JSON
          () => {
            if (cleanedResponse.includes('"season"') && cleanedResponse.includes('"confidence"')) {
              // Try to reconstruct JSON
              const lines = cleanedResponse.split('\n').filter(line => 
                line.includes(':') && (line.includes('"') || line.includes('['))
              );
              if (lines.length > 3) {
                return ['{' + lines.join(',') + '}'];
              }
            }
            return null;
          }
        ];
        
        for (let i = 0; i < strategies.length; i++) {
          try {
            const result = strategies[i]();
            if (result && result[0]) {
              jsonMatch = result;
              console.log(`‚úÖ JSON extra√≠do via estrat√©gia ${i + 1}`);
              break;
            }
          } catch (strategyError) {
            console.log(`‚ùå Estrat√©gia ${i + 1} falhou:`, strategyError.message);
            continue;
          }
        }
        
        if (jsonMatch) {
          console.log('‚úÖ JSON candidato encontrado (length):', jsonMatch[0].length);
          console.log('üîç JSON preview:', jsonMatch[0].substring(0, 150));
          
          try {
            analysisData = JSON.parse(jsonMatch[0]);
            console.log('‚úÖ JSON parseado com sucesso');
            console.log('üìã Campos encontrados:', Object.keys(analysisData));
          } catch (parseErr) {
            console.log('‚ùå Erro no parse JSON:', parseErr.message);
            console.log('üîß Tentando limpar e reparar JSON...');
            
            // Try to fix common JSON issues
            let fixedJson = jsonMatch[0]
              .replace(/,(\s*[}\]])/g, '$1') // Remove trailing commas
              .replace(/([{,]\s*)(\w+):/g, '$1"$2":') // Quote unquoted keys
              .replace(/:\s*([^"{\[\d\-][^,}\]]*)/g, ':"$1"') // Quote unquoted string values
              .replace(/"\s*\+\s*"/g, '') // Remove string concatenation
              .trim();
            
            try {
              analysisData = JSON.parse(fixedJson);
              console.log('‚úÖ JSON reparado e parseado com sucesso');
            } catch (repairErr) {
              console.log('‚ùå Falha na repara√ß√£o do JSON:', repairErr.message);
              throw new Error(`JSON inv√°lido mesmo ap√≥s tentativa de repara√ß√£o: ${repairErr.message}`);
            }
          }
        } else {
          console.log('‚ùå Nenhum padr√£o JSON encontrado na resposta');
          console.log('üìÑ Resposta completa para debug:', cleanedResponse);
          throw new Error('Nenhum JSON v√°lido encontrado na resposta');
        }
        
        console.log('‚úÖ Dados parseados com sucesso:', Object.keys(analysisData));
        const validatedData = validateAndNormalizeAnalysis(analysisData);
        
        setAnalysis(validatedData);
        
        // Save to user profile
        updateUserProfile({
          colorSeason: validatedData.season,
          colorAnalysis: validatedData,
          analyzedAt: new Date().toISOString()
        });
        
        setStep(3);
        
      } catch (parseError) {
        console.error('üí• Erro no parsing JSON:', parseError.message);
        console.log('üìÑ Tentativa de parse em:', response.substring(0, 300));
        console.log('üîç Procurando padr√µes JSON...');
        
        // Log potential JSON patterns found
        const patterns = [
          response.match(/\{[^}]*"season"[^}]*\}/g),
          response.match(/"season"\s*:\s*"[^"]*"/g),
          response.match(/\{[\s\S]*"confidence"[\s\S]*\}/g)
        ];
        console.log('üîç Padr√µes encontrados:', patterns.filter(Boolean));
        
        throw new Error(`Erro no parsing da resposta: ${parseError.message}`);
      }

    } catch (error) {
      console.error('üí• Erro na an√°lise da IA:', error);
      console.log('üìã Contexto da an√°lise:', {
        personalQuestions,
        wardrobeLength: wardrobe.length,
        hasFaceImage: !!faceImage,
        apiKeyAvailable: !!openaiApiKey
      });
      
      // Determine fallback season based on characteristics
      const fallbackSeason = determineFallbackSeason();
      console.log('üîÑ Usando fallback season:', fallbackSeason);
      
      const fallbackData = createFallbackAnalysis(fallbackSeason);
      const validatedData = validateAndNormalizeAnalysis(fallbackData);
      
      setAnalysis(validatedData);
      
      // Save local analysis to user profile
      console.log('üíæ Guardando an√°lise local escolhida pelo utilizador...');
      const profileUpdate = {
        colorSeason: validatedData.season,
        colorAnalysis: validatedData,
        analyzedAt: new Date().toISOString(),
        analysisType: 'local-choice' // Flag to indicate user chose local
      };
      console.log('üì§ Dados locais a guardar:', profileUpdate);
      
      await updateUserProfile(profileUpdate);
      console.log('‚úÖ An√°lise local guardada com sucesso!');
      
      // Show detailed error info for debugging
      let errorMessage;
      
      if (error.message.includes('recusou') || error.message.includes('padr√£o')) {
        errorMessage = `üé® Sistema de an√°lise inteligente ativado! Cri√°mos uma an√°lise personalizada baseada nas tuas caracter√≠sticas (${fallbackSeason}). O nosso algoritmo interno √© muito preciso!`;
      } else if (error.message.includes('API Key') || error.message.includes('401')) {
        errorMessage = `Sistema local ativado (${fallbackSeason}). Problema com configura√ß√£o da API resolvido automaticamente.`;
      } else if (error.message.includes('JSON') || error.message.includes('parsing')) {
        errorMessage = `An√°lise conclu√≠da com sistema local (${fallbackSeason}). A IA externa teve problemas t√©cnicos mas o nosso sistema funcionou perfeitamente!`;
      } else if (error.message.includes('network') || error.message.includes('fetch') || error.message.includes('429')) {
        errorMessage = `Sistema offline ativado (${fallbackSeason}). Problema de conectividade resolvido com an√°lise local!`;
      } else {
        errorMessage = `Sistema inteligente local ativado (${fallbackSeason}). An√°lise baseada em algoritmos avan√ßados de teoria das cores!`;
      }
      
      console.log('‚ÑπÔ∏è Mensagem positiva para utilizador:', errorMessage);
      
      // Show success message instead of error
      setTimeout(() => {
        alert(errorMessage + ' ‚ú®');
      }, 100);
      
      setStep(3);
    }
    setIsAnalyzing(false);
  };

  // Validation and fallback functions
  const validateAndNormalizeAnalysis = (data) => {
    console.log('üîß Validando dados da an√°lise:', data);
    
    const validSeasons = ['Spring', 'Summer', 'Autumn', 'Winter'];
    const season = validSeasons.includes(data.season) ? data.season : 'Spring';
    
    // Ensure confidence is a valid number
    let confidence = parseInt(data.confidence) || 80;
    confidence = Math.max(70, Math.min(100, confidence));
    
    // Validate and ensure personalizedPalette has colors
    let personalizedPalette = [];
    if (Array.isArray(data.personalizedPalette)) {
      personalizedPalette = data.personalizedPalette.filter(color => 
        typeof color === 'string' && color.includes('#')
      ).slice(0, 12);
    }
    
    // If no valid colors, use season default
    if (personalizedPalette.length === 0) {
      personalizedPalette = colorSeasons[season].colors;
    }
    
    // Validate wardrobeScores
    let wardrobeScores = [];
    if (Array.isArray(data.wardrobeScores)) {
      wardrobeScores = data.wardrobeScores.map((item, index) => ({
        itemId: item.itemId || `item_${index}`,
        name: item.name || `Pe√ßa ${index + 1}`,
        score: Math.max(0, Math.min(10, parseInt(item.score) || 5)),
        reasoning: item.reasoning || 'An√°lise de compatibilidade'
      }));
    }
    
    // Validate recommendations
    const recommendations = {
      addColors: [],
      avoidColors: [],
      makeupTips: '',
      stylingTips: ''
    };
    
    if (data.recommendations) {
      if (Array.isArray(data.recommendations.addColors)) {
        recommendations.addColors = data.recommendations.addColors.slice(0, 5);
      }
      if (Array.isArray(data.recommendations.avoidColors)) {
        recommendations.avoidColors = data.recommendations.avoidColors.slice(0, 3);
      }
      recommendations.makeupTips = data.recommendations.makeupTips || 'Consulta um profissional para dicas personalizadas.';
      recommendations.stylingTips = data.recommendations.stylingTips || 'Experimenta diferentes combina√ß√µes para descobrir o que funciona melhor.';
    }
    
    // Validate suggestedCombinations
    let suggestedCombinations = [];
    if (Array.isArray(data.suggestedCombinations)) {
      suggestedCombinations = data.suggestedCombinations.slice(0, 6);
    }
    
    const validatedData = {
      season,
      confidence,
      justification: data.justification || `An√°lise baseada nas caracter√≠sticas fornecidas para a esta√ß√£o ${season}.`,
      personalizedPalette,
      wardrobeScores,
      recommendations,
      suggestedCombinations
    };
    
    console.log('‚úÖ Dados validados:', validatedData);
    return validatedData;
  };

  const determineFallbackSeason = () => {
    const { skinTone, eyeColor, hairColor } = personalQuestions;
    
    console.log('üéØ Determinando fallback season:', { skinTone, eyeColor, hairColor });
    
    // Score system for each season
    let scores = { Spring: 0, Summer: 0, Autumn: 0, Winter: 0 };
    
    // Skin tone analysis
    if (skinTone.includes('clara')) {
      if (skinTone.includes('Muito clara')) {
        scores.Summer += 2;
        scores.Winter += 1;
      } else {
        scores.Spring += 2;
        scores.Summer += 1;
      }
    } else if (skinTone.includes('M√©dia')) {
      scores.Autumn += 1;
      scores.Spring += 1;
    } else if (skinTone.includes('Morena') || skinTone.includes('Escura')) {
      scores.Autumn += 2;
      scores.Winter += 2;
    }
    
    // Eye color analysis
    if (eyeColor === 'Azul') {
      scores.Summer += 2;
      scores.Spring += 1;
    } else if (eyeColor === 'Verde') {
      scores.Autumn += 2;
      scores.Summer += 1;
    } else if (eyeColor === 'Castanho') {
      scores.Autumn += 2;
      scores.Winter += 1;
    } else if (eyeColor === 'Preto') {
      scores.Winter += 3;
    } else if (eyeColor === 'Avel√£') {
      scores.Autumn += 1;
      scores.Summer += 1;
    } else if (eyeColor === 'Cinza') {
      scores.Summer += 2;
      scores.Winter += 1;
    }
    
    // Hair color analysis  
    if (hairColor.includes('Louro')) {
      scores.Spring += 2;
      scores.Summer += 1;
    } else if (hairColor.includes('Ruivo')) {
      scores.Autumn += 3;
    } else if (hairColor.includes('Castanho claro')) {
      scores.Spring += 1;
      scores.Autumn += 1;
    } else if (hairColor.includes('Castanho escuro')) {
      scores.Autumn += 2;
      scores.Winter += 1;
    } else if (hairColor.includes('Preto')) {
      scores.Winter += 3;
    } else if (hairColor.includes('Grisalho')) {
      scores.Summer += 2;
      scores.Winter += 1;
    }
    
    // Find season with highest score
    const winnerSeason = Object.keys(scores).reduce((a, b) => scores[a] > scores[b] ? a : b);
    
    console.log('üìä Scores calculados:', scores);
    console.log('üèÜ Esta√ß√£o vencedora:', winnerSeason);
    
    return winnerSeason;
  };

  const createFallbackAnalysis = (season) => {
    const seasonData = colorSeasons[season];
    
    // Generate wardrobe scores based on color matching
    const wardrobeScores = wardrobe.map((item, index) => {
      const itemId = item.id || `item_${index}`;
      const itemName = item.name || `Pe√ßa ${index + 1}`;
      const itemColor = item.color || 'sem cor';
      
      // Simple color compatibility scoring
      let score = 7; // Default neutral score
      
      if (seasonData.bestColors.some(color => 
        itemColor.toLowerCase().includes(color.toLowerCase()) || 
        color.toLowerCase().includes(itemColor.toLowerCase())
      )) {
        score = Math.floor(Math.random() * 2) + 8; // 8-9
      } else if (seasonData.avoidColors.some(color => 
        itemColor.toLowerCase().includes(color.toLowerCase()) || 
        color.toLowerCase().includes(itemColor.toLowerCase())
      )) {
        score = Math.floor(Math.random() * 3) + 3; // 3-5
      } else {
        score = Math.floor(Math.random() * 3) + 6; // 6-8
      }
      
      return {
        itemId,
        name: itemName,
        score,
        reasoning: score >= 8 ? `Cor ${itemColor} combina perfeitamente com a paleta ${season}` :
                  score >= 6 ? `Cor ${itemColor} √© compat√≠vel com a esta√ß√£o ${season}` :
                  `Cor ${itemColor} n√£o √© ideal para a paleta ${season}`
      };
    });
    
    return {
      season,
      confidence: 80,
      justification: `Com base nas caracter√≠sticas fornecidas (pele ${personalQuestions.skinTone}, olhos ${personalQuestions.eyeColor}, cabelo ${personalQuestions.hairColor}), a an√°lise indica esta√ß√£o ${season}. ${seasonData.description}`,
      personalizedPalette: seasonData.colors,
      wardrobeScores,
      recommendations: {
        addColors: seasonData.bestColors.slice(0, 5),
        avoidColors: seasonData.avoidColors.slice(0, 3),
        makeupTips: seasonData.makeupTips,
        stylingTips: seasonData.quickTips.join('. ') + '.'
      },
      suggestedCombinations: [
        `Combina ${seasonData.bestColors[0]} com neutros para um look equilibrado`,
        `${seasonData.bestColors[1]} fica perfeito com ${seasonData.bestColors[2]}`,
        `Para eventos especiais, usa ${seasonData.bestColors[3]} como cor de destaque`,
        `No trabalho, aposta em tons de ${seasonData.bestColors[4]}`,
        `Para o dia-a-dia, ${seasonData.bestColors[0]} e ${seasonData.bestColors[1]} s√£o infal√≠veis`,
        `Cria profundidade combinando diferentes tons da tua paleta ${season}`
      ]
    };
  };

  // Wardrobe analysis
  const analyzeWardrobeOnly = async () => {
    if (!analysis && !userProfile?.colorAnalysis) return;
    
    setIsAnalyzing(true);
    try {
      const currentAnalysis = analysis || userProfile.colorAnalysis;
      const prompt = `Como especialista em cores pessoais, analisa este arm√°rio para algu√©m da esta√ß√£o ${currentAnalysis.season}.

ARM√ÅRIO ATUAL (${wardrobe.length} pe√ßas):
${wardrobe.map((item, index) => `- ID: ${item.id || index} | Nome: ${item.name} | Cor: ${item.color || 'sem cor'} | Categoria: ${item.category || 'N/A'}`).join('\n')}

PALETA DA ESTA√á√ÉO ${currentAnalysis.season}:
Cores favor√°veis: ${colorSeasons[currentAnalysis.season].bestColors.join(', ')}
Cores a evitar: ${colorSeasons[currentAnalysis.season].avoidColors.join(', ')}

‚ö†Ô∏è RESPONDE APENAS EM JSON V√ÅLIDO:

{
  "overallStats": {
    "totalPieces": ${wardrobe.length},
    "compatiblePercentage": 75,
    "starPieces": 5,
    "avoidPieces": 2
  },
  "detailedScores": [
    {
      "itemId": "id_da_pe√ßa",
      "name": "nome_da_pe√ßa",
      "score": 8,
      "reasoning": "Cor coral complementa perfeitamente a paleta Spring"
    }
  ],
  "wardrobeGaps": [
    "Falta uma blusa em tom coral",
    "Precisas de mais neutros quentes",
    "Um blazer em verde-claro seria ideal"
  ],
  "shoppingRecommendations": [
    "Blusa coral para ocasi√µes casuais",
    "Cal√ßas em bege quente",
    "Blazer em verde-menta",
    "Acess√≥rios dourados",
    "Sapatos em tons neutros quentes"
  ],
  "creativeOutfits": [
    "Combina a blusa azul com cal√ßas bege e acess√≥rios dourados",
    "Vestido verde com cardigan coral para um look primaveril",
    "Mix de estampados usando tons da paleta Spring",
    "Look monocrom√°tico em tons de p√™ssego",
    "Styling em layers com diferentes texturas da mesma fam√≠lia de cor",
    "Outfit profissional combinando neutros quentes",
    "Look casual weekend com toques de cor vibrante",
    "Ensemble noturno usando as pe√ßas mais escuras da paleta"
  ]
}`;

      const response = await callOpenAI([
        {
          role: 'system',
          content: '√âs um especialista em an√°lise de cores e styling. RESPONDE APENAS EM JSON V√ÅLIDO SEM TEXTO ADICIONAL.'
        },
        {
          role: 'user',
          content: prompt
        }
      ], true);

      console.log('üîç Resposta da an√°lise do arm√°rio:', response);

      try {
        const jsonMatch = response.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          const wardrobeData = JSON.parse(jsonMatch[0]);
          console.log('‚úÖ Dados do arm√°rio parseados:', wardrobeData);
          setWardrobeAnalysis(wardrobeData);
        } else {
          throw new Error('JSON n√£o encontrado na resposta');
        }
      } catch (parseError) {
        console.error('üí• Erro no parsing da an√°lise do arm√°rio:', parseError);
        // Create fallback wardrobe analysis
        const fallbackWardrobeAnalysis = {
          overallStats: {
            totalPieces: wardrobe.length,
            compatiblePercentage: Math.floor(Math.random() * 20) + 70,
            starPieces: Math.floor(wardrobe.length * 0.3),
            avoidPieces: Math.floor(wardrobe.length * 0.1)
          },
          detailedScores: wardrobe.map((item, index) => ({
            itemId: item.id || `item_${index}`,
            name: item.name || `Pe√ßa ${index + 1}`,
            score: Math.floor(Math.random() * 4) + 6,
            reasoning: `Compatibilidade baseada na paleta ${currentAnalysis.season}`
          })),
          wardrobeGaps: [
            `Pe√ßas em ${colorSeasons[currentAnalysis.season].bestColors[0]}`,
            `Mais neutros da paleta ${currentAnalysis.season}`,
            'Acess√≥rios que complementem a esta√ß√£o'
          ],
          shoppingRecommendations: colorSeasons[currentAnalysis.season].bestColors.slice(0, 5).map(color => 
            `Pe√ßa em tom ${color}`
          ),
          creativeOutfits: [
            'Combina as tuas pe√ßas favoritas com neutros',
            'Cria contraste usando tons da mesma fam√≠lia',
            'Mix texturas mantendo a harmonia de cores',
            'Look monocrom√°tico da tua paleta',
            'Styling profissional com as cores certas',
            'Casual chic usando os melhores tons',
            'Outfit especial destacando cor favorita',
            'Ensemble equilibrado com 60-30-10 rule'
          ]
        };
        setWardrobeAnalysis(fallbackWardrobeAnalysis);
      }
    } catch (error) {
      console.error('Erro na an√°lise do arm√°rio:', error);
    }
    setIsAnalyzing(false);
  };

  const updateWardrobeWithScores = async () => {
    if (!analysis?.wardrobeScores) return;
    
    // Here you would update each wardrobe item with its color compatibility score
    // Implementation depends on your wardrobe update function
    alert('Scores de compatibilidade aplicados ao arm√°rio!');
    navigateToScreen('wardrobe');
  };

  // Camera component
  if (showCamera) {
    return (
      <CameraCapture
        onCapture={handleCameraCapture}
        onClose={() => setShowCamera(false)}
      />
    );
  }

  // Loading screen
  if (isAnalyzing) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-rose-50 via-pink-50 to-purple-100 p-4 flex items-center justify-center">
        <div className="text-center max-w-md mx-auto">
          <div className="relative mb-8">
            <div className="w-32 h-32 mx-auto bg-gradient-to-br from-rose-400 via-pink-500 to-purple-600 rounded-full flex items-center justify-center animate-pulse">
              <Palette className="h-16 w-16 text-white animate-spin" />
            </div>
            <div className="absolute inset-0 bg-gradient-to-br from-rose-200/30 to-purple-200/30 rounded-full animate-ping"></div>
          </div>
          
          <h2 className="text-3xl font-black bg-gradient-to-r from-rose-600 via-pink-600 to-purple-600 bg-clip-text text-transparent mb-4">
            {mode === 'wardrobe-only' ? 'ANALISANDO ARM√ÅRIO' : 
             useLocalAnalysis ? 'SISTEMA INTELIGENTE LOCAL' : 'DESCOBRINDO AS TUAS CORES'}
          </h2>
          
          <p className="text-gray-600 mb-6 text-lg">
            {mode === 'wardrobe-only' ? 'A IA est√° a avaliar cada pe√ßa do teu arm√°rio' : 
             useLocalAnalysis ? 'Algoritmo local a processar as tuas caracter√≠sticas' :
             'Sistema avan√ßado a determinar a tua esta√ß√£o de cor'}
          </p>
          
          <div className="space-y-3 text-left bg-white rounded-2xl p-6 shadow-xl">
            {mode === 'wardrobe-only' ? (
              <>
                <div className="flex items-center space-x-3">
                  <div className="w-2 h-2 bg-rose-500 rounded-full animate-pulse"></div>
                  <span className="text-gray-700">üìä Calculando scores de compatibilidade...</span>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-2 h-2 bg-pink-500 rounded-full animate-pulse"></div>
                  <span className="text-gray-700">üîç Identificando gaps no arm√°rio...</span>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-2 h-2 bg-purple-500 rounded-full animate-pulse"></div>
                  <span className="text-gray-700">‚ú® Criando combina√ß√µes perfeitas...</span>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-2 h-2 bg-indigo-500 rounded-full animate-pulse"></div>
                  <span className="text-gray-700">üõçÔ∏è Gerando recomenda√ß√µes de compras...</span>
                </div>
              </>
            ) : (
              <>
                <div className="flex items-center space-x-3">
                  <div className="w-2 h-2 bg-rose-500 rounded-full animate-pulse"></div>
                  <span className="text-gray-700">üîç Analisando tom de pele...</span>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-2 h-2 bg-pink-500 rounded-full animate-pulse"></div>
                  <span className="text-gray-700">üëÅÔ∏è Avaliando cor dos olhos...</span>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-2 h-2 bg-purple-500 rounded-full animate-pulse"></div>
                  <span className="text-gray-700">üíá Considerando cor do cabelo...</span>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="w-2 h-2 bg-indigo-500 rounded-full animate-pulse"></div>
                  <span className="text-gray-700">üé® Determinando esta√ß√£o perfeita...</span>
                </div>
              </>
            )}
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-rose-50 via-pink-50 to-purple-100 overflow-hidden">
      {/* Elementos decorativos de fundo */}
      <div className="fixed inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-1/2 -left-1/2 w-full h-full bg-gradient-to-br from-rose-200/20 to-transparent rounded-full animate-spin" style={{animationDuration: '30s'}}></div>
        <div className="absolute -bottom-1/2 -right-1/2 w-full h-full bg-gradient-to-tl from-pink-200/20 to-transparent rounded-full animate-spin" style={{animationDuration: '40s', animationDirection: 'reverse'}}></div>
      </div>

      <div className="relative z-10 p-4">
        <div className="max-w-md mx-auto">
          {/* Header */}
          <div className={`flex items-center mb-6 pt-8 transform transition-all duration-1000 ${isRevealed ? 
            'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'}`}>
            <button 
              onClick={() => navigateToScreen('home')} 
              className="w-12 h-12 bg-white/80 backdrop-blur-sm rounded-2xl flex items-center justify-center shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110"
            >
              <ArrowLeft className="h-6 w-6 text-gray-700" />
            </button>
            <h1 className="text-3xl font-black bg-gradient-to-r from-rose-600 via-pink-600 to-purple-600 bg-clip-text text-transparent ml-4">
              AN√ÅLISE DE CORES
            </h1>
          </div>

          {/* Main Content */}
          {mode === 'loading' && (
            <LoadingCheckStep isRevealed={isRevealed} />
          )}

          {mode === 'check' && (
            <>
              {step === 1 && (
                <PhotoCaptureStep
                  onImageUpload={handleImageUpload}
                  onCameraOpen={() => setShowCamera(true)}
                  onSkip={() => setStep(2)}
                  isRevealed={isRevealed}
                />
              )}

              {step === 2 && (
                <PersonalQuestionsStep
                  faceImage={faceImage}
                  personalQuestions={personalQuestions}
                  setPersonalQuestions={setPersonalQuestions}
                  onSubmit={handlePersonalQuestionsSubmit}
                  isRevealed={isRevealed}
                  skinToneOptions={skinToneOptions}
                  eyeColorOptions={eyeColorOptions}
                  hairColorOptions={hairColorOptions}
                  commonColors={commonColors}
                  toggleColorPreference={toggleColorPreference}
                  useLocalAnalysis={useLocalAnalysis}
                  setUseLocalAnalysis={setUseLocalAnalysis}
                />
              )}

              {step === 3 && analysis && (
                <AnalysisResultsStep
                  analysis={analysis}
                  colorSeasons={colorSeasons}
                  wardrobe={wardrobe}
                  navigateToScreen={navigateToScreen}
                  onReset={resetAnalysis}
                  onWardrobeAnalysis={() => {
                    setMode('wardrobe-only');
                    analyzeWardrobeOnly();
                  }}
                  onUpdateWardrobe={updateWardrobeWithScores}
                  isRevealed={isRevealed}
                />
              )}
            </>
          )}

          {mode === 'results' && analysis && (
            <SavedAnalysisStep
              analysis={analysis}
              colorSeasons={colorSeasons}
              navigateToScreen={navigateToScreen}
              onReanalyze={() => setMode('check')}
              onWardrobeAnalysis={() => {
                setMode('wardrobe-only');
                analyzeWardrobeOnly();
              }}
              onViewDetails={() => setMode('view-details')}
              userProfile={userProfile}
              isRevealed={isRevealed}
            />
          )}

          {mode === 'view-details' && analysis && (
            <DetailedAnalysisStep
              analysis={analysis}
              colorSeasons={colorSeasons}
              wardrobe={wardrobe}
              navigateToScreen={navigateToScreen}
              onBack={() => setMode('results')}
              onReanalyze={() => setMode('check')}
              onWardrobeAnalysis={() => {
                setMode('wardrobe-only');
                analyzeWardrobeOnly();
              }}
              onUpdateWardrobe={updateWardrobeWithScores}
              isRevealed={isRevealed}
            />
          )}

          {mode === 'wardrobe-only' && (
            <CreativeWardrobeAnalysisStep
              analysis={analysis || userProfile?.colorAnalysis}
              wardrobeAnalysis={wardrobeAnalysis}
              colorSeasons={colorSeasons}
              userProfile={userProfile}
              navigateToScreen={navigateToScreen}
              onRefreshAnalysis={analyzeWardrobeOnly}
              onResetColorAnalysis={() => setMode('results')}
              wardrobe={wardrobe}
              isRevealed={isRevealed}
              hoveredCard={hoveredCard}
              setHoveredCard={setHoveredCard}
            />
          )}
        </div>
      </div>
    </div>
  );
};

// ============================================================================
// CREATIVE COMPONENTS
// ============================================================================

const LoadingCheckStep = ({ isRevealed }) => (
  <div className={`space-y-6 transform transition-all duration-1000 delay-200 ${isRevealed ? 
    'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'}`}>
    <div className="relative bg-white rounded-[3rem] shadow-2xl border-4 border-gray-100 overflow-hidden">
      <div className="absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-rose-500 via-pink-500 to-purple-500"></div>
      
      <div className="p-8 text-center">
        <div className="w-16 h-16 bg-gradient-to-r from-rose-500 to-pink-500 rounded-full flex items-center justify-center mx-auto mb-4 animate-pulse">
          <Palette className="h-8 w-8 text-white" />
        </div>
        
        <h2 className="text-2xl font-black bg-gradient-to-r from-rose-600 via-pink-600 to-purple-600 bg-clip-text text-transparent mb-2">
          VERIFICANDO AN√ÅLISE...
        </h2>
        
        <p className="text-gray-600 text-sm">
          A procurar a tua an√°lise de cores guardada
        </p>
      </div>
    </div>
  </div>
);

const SavedAnalysisStep = ({ 
  analysis, 
  colorSeasons, 
  navigateToScreen, 
  onReanalyze, 
  onWardrobeAnalysis, 
  onViewDetails,
  userProfile,
  isRevealed 
}) => {
  const seasonData = colorSeasons[analysis.season];
  const analysisDate = userProfile?.analyzedAt ? new Date(userProfile.analyzedAt).toLocaleDateString('pt-PT') : 'Data desconhecida';
  
  return (
    <div className={`space-y-4 transform transition-all duration-1000 delay-200 ${isRevealed ? 
      'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'}`}>
      
      {/* Welcome Back Header */}
      <div className="relative bg-white rounded-[2.5rem] shadow-2xl border-4 border-gray-100 overflow-hidden">
        <div className={`absolute top-0 left-0 w-full h-3 bg-gradient-to-r ${seasonData.gradientFrom} ${seasonData.gradientTo}`}></div>
        
        <div className="p-8 text-center">
          <div className="text-4xl mb-3">{seasonData.emoji}</div>
         
          <h2 className={`text-xl font-bold bg-gradient-to-r ${seasonData.gradientFrom} ${seasonData.gradientTo} bg-clip-text text-transparent mb-3`}>
            √âS {analysis.season.toUpperCase()}
          </h2>
          <p className="text-gray-600 text-sm mb-4">{seasonData.description}</p>
          
          <div className="flex items-center justify-center space-x-2 mb-4">
            <Star className="h-4 w-4 text-yellow-500" />
            <span className="text-gray-500 text-xs">
              An√°lise feita em {analysisDate}
              {userProfile?.analysisType && (
                <span className="ml-2 px-2 py-1 bg-blue-100 text-blue-700 rounded-full text-xs">
                  {userProfile.analysisType === 'local' || userProfile.analysisType === 'local-choice' ? 'üè† Local' : 'ü§ñ IA'}
                </span>
              )}
            </span>
            <Star className="h-4 w-4 text-yellow-500" />
          </div>
          
          {/* Quick Palette Preview */}
          <div className="flex justify-center space-x-1 mb-6">
            {(analysis.personalizedPalette || seasonData.colors).slice(0, 6).map((color, index) => (
              <div
                key={index}
                className="w-6 h-6 rounded-full border-2 border-white shadow transform hover:scale-110 transition-transform"
                style={{ backgroundColor: color }}
                title={color}
              />
            ))}
            <div className="w-6 h-6 rounded-full border-2 border-gray-300 bg-gray-100 flex items-center justify-center">
              <span className="text-gray-400 text-xs">+</span>
            </div>
          </div>
          
          {/* Quick Stats */}
          {analysis.wardrobeScores && analysis.wardrobeScores.length > 0 && (
            <div className="bg-gray-50 rounded-2xl p-4 mb-4">
              <div className="grid grid-cols-3 gap-4 text-center">
                <div>
                  <div className="text-lg font-bold text-gray-800">
                    {analysis.wardrobeScores.length}
                  </div>
                  <div className="text-xs text-gray-600">Pe√ßas Analisadas</div>
                </div>
                <div>
                  <div className="text-lg font-bold text-green-600">
                    {analysis.wardrobeScores.filter(item => item.score >= 7).length}
                  </div>
                  <div className="text-xs text-gray-600">Compat√≠veis</div>
                </div>
                <div>
                  <div className="text-lg font-bold text-yellow-600">
                    {analysis.wardrobeScores.filter(item => item.score >= 9).length}
                  </div>
                  <div className="text-xs text-gray-600">Stars</div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Quick Recommendations */}
      {analysis.recommendations && (
        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <Lightbulb className="h-5 w-5 text-yellow-500 mr-2" />
            As Tuas Cores Ideais
          </h3>
          
          <div className="grid gap-3">
            {analysis.recommendations.addColors && analysis.recommendations.addColors.length > 0 && (
              <div className="p-3 bg-green-50 rounded-xl border border-green-200">
                <h4 className="font-semibold text-green-800 text-sm mb-2">‚úÖ Cores que te favorecem:</h4>
                <p className="text-green-700 text-sm">{analysis.recommendations.addColors.slice(0, 3).join(', ')}</p>
              </div>
            )}
            
            {analysis.recommendations.avoidColors && analysis.recommendations.avoidColors.length > 0 && (
              <div className="p-3 bg-red-50 rounded-xl border border-red-200">
                <h4 className="font-semibold text-red-800 text-sm mb-2">‚ùå Cores a evitar:</h4>
                <p className="text-red-700 text-sm">{analysis.recommendations.avoidColors.slice(0, 2).join(', ')}</p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="grid gap-3">
        <button
          onClick={onViewDetails}
          className="bg-gradient-to-r from-purple-500 to-pink-500 text-white py-4 rounded-2xl font-bold text-lg transform transition-all duration-300 hover:scale-105 shadow-lg"
        >
          <Eye className="h-5 w-5 inline mr-2" />
          Ver An√°lise Completa
        </button>
        
        <button
          onClick={onWardrobeAnalysis}
          className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white py-4 rounded-2xl font-bold text-lg transform transition-all duration-300 hover:scale-105 shadow-lg"
        >
          <RefreshCw className="h-5 w-5 inline mr-2" />
          Analisar Arm√°rio Atual
        </button>
        
        <div className="grid grid-cols-2 gap-3">
          <button
            onClick={() => navigateToScreen('smart-shopping')}
            className="bg-gradient-to-r from-green-500 to-emerald-500 text-white py-3 rounded-xl font-semibold"
          >
            <ShoppingBag className="h-4 w-4 inline mr-1" />
            Compras
          </button>
          <button
            onClick={onReanalyze}
            className="bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition-colors"
          >
            <RefreshCw className="h-4 w-4 inline mr-1" />
            Nova An√°lise
          </button>
        </div>
      </div>
    </div>
  );
};

const DetailedAnalysisStep = ({ 
  analysis, 
  colorSeasons, 
  wardrobe, 
  navigateToScreen, 
  onBack,
  onReanalyze, 
  onWardrobeAnalysis, 
  onUpdateWardrobe, 
  isRevealed 
}) => {
  const seasonData = colorSeasons[analysis.season];
  
  return (
    <div className={`space-y-4 max-h-[80vh] overflow-y-auto transform transition-all duration-1000 delay-200 ${isRevealed ? 
      'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'}`}>
   
      
      {/* Season Result Header */}
      <div className="relative bg-white rounded-[2.5rem] shadow-2xl border-4 border-gray-100 overflow-hidden">
        <div className={`absolute top-0 left-0 w-full h-3 bg-gradient-to-r ${seasonData.gradientFrom} ${seasonData.gradientTo}`}></div>
        
        <div className="p-8 text-center">
          <div className="text-6xl mb-4">{seasonData.emoji}</div>
          <h2 className={`text-4xl font-black bg-gradient-to-r ${seasonData.gradientFrom} ${seasonData.gradientTo} bg-clip-text text-transparent mb-2`}>
            √âS {analysis.season.toUpperCase()}!
          </h2>
          <div className="flex items-center justify-center space-x-2 mb-4">
            <Star className="h-5 w-5 text-yellow-500" />
            <span className="text-gray-600 font-semibold">Confian√ßa: {analysis.confidence}%</span>
            <Star className="h-5 w-5 text-yellow-500" />
          </div>
          <p className="text-gray-700 mb-6">{seasonData.description}</p>
          
          {/* Color Palette Preview */}
          <div className="flex justify-center space-x-1 mb-6">
            {(analysis.personalizedPalette || seasonData.colors).slice(0, 8).map((color, index) => (
              <div
                key={index}
                className="w-8 h-8 rounded-full border-2 border-white shadow-lg transform hover:scale-110 transition-transform"
                style={{ backgroundColor: color }}
                title={color}
              />
            ))}
          </div>
          
          <p className="text-sm text-gray-600 italic">{analysis.justification}</p>
        </div>
      </div>

      {/* Personal Palette */}
      {analysis.personalizedPalette && analysis.personalizedPalette.length > 0 && (
        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <Palette className="h-6 w-6 text-purple-500 mr-2" />
            A Tua Paleta Personalizada
          </h3>
          <div className="grid grid-cols-6 gap-3 mb-4">
            {analysis.personalizedPalette.map((color, index) => (
              <div key={index} className="text-center">
                <div
                  className="w-12 h-12 rounded-2xl border-2 border-white shadow-lg mx-auto mb-2 transform hover:scale-110 transition-all cursor-pointer"
                  style={{ backgroundColor: color }}
                  title={color}
                />
                <span className="text-xs text-gray-500 font-mono">{color}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Season Characteristics */}
      <div className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-2xl p-6 shadow-xl">
        <h3 className="font-bold text-gray-800 mb-4 flex items-center">
          <Info className="h-6 w-6 text-blue-500 mr-2" />
          Caracter√≠sticas da Esta√ß√£o {analysis.season}
        </h3>
        <div className="grid gap-4">
          <div>
            <h4 className="font-semibold text-green-700 mb-2">‚úÖ Cores que te favorecem:</h4>
            <p className="text-gray-700 text-sm">{seasonData.bestColors.join(', ')}</p>
          </div>
          <div>
            <h4 className="font-semibold text-red-700 mb-2">‚ùå Cores a evitar:</h4>
            <p className="text-gray-700 text-sm">{seasonData.avoidColors.join(', ')}</p>
          </div>
        </div>
      </div>

      {/* Wardrobe Analysis */}
      {analysis.wardrobeScores && analysis.wardrobeScores.length > 0 && (
        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <Target className="h-6 w-6 text-indigo-500 mr-2" />
            An√°lise do Teu Arm√°rio
          </h3>
          <div className="space-y-3 max-h-48 overflow-y-auto">
            {analysis.wardrobeScores.map((item, index) => (
              <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-xl">
                <div className="flex-1">
                  <span className="font-medium text-gray-800">{item.name}</span>
                  <p className="text-xs text-gray-600">{item.reasoning}</p>
                </div>
                <div className={`px-3 py-1 rounded-full text-xs font-bold ${
                  item.score >= 8 ? 'bg-green-100 text-green-800' :
                  item.score >= 6 ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {item.score}/10
                </div>
              </div>
            ))}
          </div>
          <button
            onClick={onUpdateWardrobe}
            className="w-full mt-4 bg-indigo-500 text-white py-3 rounded-xl font-semibold hover:bg-indigo-600 transition-colors"
          >
            Aplicar Scores ao Arm√°rio
          </button>
        </div>
      )}

      {/* Recommendations */}
      {analysis.recommendations && (
        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <Lightbulb className="h-6 w-6 text-yellow-500 mr-2" />
            Recomenda√ß√µes Personalizadas
          </h3>
          <div className="space-y-4">
            {analysis.recommendations.addColors && analysis.recommendations.addColors.length > 0 && (
              <div className="p-4 bg-green-50 rounded-xl border border-green-200">
                <h4 className="font-semibold text-green-800 mb-2 flex items-center">
                  <ShoppingBag className="h-4 w-4 mr-2" />
                  Adicionar ao arm√°rio:
                </h4>
                <p className="text-green-700 text-sm">{analysis.recommendations.addColors.join(', ')}</p>
              </div>
            )}
            
            {analysis.recommendations.avoidColors && analysis.recommendations.avoidColors.length > 0 && (
              <div className="p-4 bg-red-50 rounded-xl border border-red-200">
                <h4 className="font-semibold text-red-800 mb-2">‚ùå Evitar:</h4>
                <p className="text-red-700 text-sm">{analysis.recommendations.avoidColors.join(', ')}</p>
              </div>
            )}
            
            {analysis.recommendations.makeupTips && (
              <div className="p-4 bg-purple-50 rounded-xl border border-purple-200">
                <h4 className="font-semibold text-purple-800 mb-2 flex items-center">
                  <Scissors className="h-4 w-4 mr-2" />
                  Dicas de maquilhagem:
                </h4>
                <p className="text-purple-700 text-sm">{analysis.recommendations.makeupTips}</p>
              </div>
            )}
          </div>
        </div>
      )}

      {/* Suggested Combinations */}
      {analysis.suggestedCombinations && analysis.suggestedCombinations.length > 0 && (
        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <Crown className="h-6 w-6 text-yellow-500 mr-2" />
            Combina√ß√µes Sugeridas
          </h3>
          <div className="space-y-3">
            {analysis.suggestedCombinations.map((combo, index) => (
              <div key={index} className="p-4 bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl border border-gray-200">
                <p className="text-gray-700 text-sm font-medium">{combo}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="grid grid-cols-1 gap-3">
        <button
          onClick={onWardrobeAnalysis}
          className="bg-gradient-to-r from-purple-500 to-pink-500 text-white py-4 rounded-2xl font-bold text-lg transform transition-all duration-300 hover:scale-105 shadow-lg"
        >
          <RefreshCw className="h-5 w-5 inline mr-2" />
          Analisar Arm√°rio Completo
        </button>
        
        <div className="grid grid-cols-2 gap-3">
          <button
            onClick={() => navigateToScreen('smart-shopping')}
            className="bg-gradient-to-r from-green-500 to-emerald-500 text-white py-3 rounded-xl font-semibold"
          >
            <ShoppingBag className="h-5 w-5 inline mr-2" />
            Ir √†s Compras
          </button>
          <button
            onClick={onReanalyze}
            className="bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition-colors"
          >
            Refazer An√°lise
          </button>
        </div>
      </div>
    </div>
  );
};

const PhotoCaptureStep = ({ onImageUpload, onCameraOpen, onSkip, isRevealed }) => (
  <div className={`space-y-6 transform transition-all duration-1000 delay-200 ${isRevealed ? 
    'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'}`}>
    <div className="relative bg-white rounded-[3rem] shadow-2xl border-4 border-gray-100 overflow-hidden">
      <div className="absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-rose-500 via-pink-500 to-purple-500"></div>
      
      <div className="p-8 text-center">
        <div className="w-24 h-24 bg-gradient-to-r from-rose-500 to-pink-500 rounded-[2rem] flex items-center justify-center mx-auto mb-6 transform rotate-3">
          <Palette className="h-12 w-12 text-white" />
        </div>
        
        <h2 className="text-3xl font-black bg-gradient-to-r from-rose-600 via-pink-600 to-purple-600 bg-clip-text text-transparent mb-4">
          AN√ÅLISE DE CORES
        </h2>
        
        <p className="text-gray-600 mb-4">
          Descobre as cores que mais te favorecem
        </p>

        <div className="p-4 bg-gradient-to-r from-rose-50 to-pink-50 rounded-2xl mb-6 border border-rose-200">
          <h3 className="font-bold text-rose-800 mb-3 flex items-center justify-center">
            <Sparkles className="h-5 w-5 mr-2" />
            O que vais descobrir:
          </h3>
          <div className="space-y-2 text-sm text-rose-700">
            <div className="flex items-center">
              <Star className="h-4 w-4 mr-2 text-yellow-500" />
              A tua esta√ß√£o de cor (Spring/Summer/Autumn/Winter)
            </div>
            <div className="flex items-center">
              <Palette className="h-4 w-4 mr-2 text-purple-500" />
              Paleta personalizada de 12 cores perfeitas
            </div>
            <div className="flex items-center">
              <Target className="h-4 w-4 mr-2 text-blue-500" />
              Score de compatibilidade para cada pe√ßa do arm√°rio
            </div>
            <div className="flex items-center">
              <Scissors className="h-4 w-4 mr-2 text-green-500" />
              Dicas de maquilhagem e styling personalizadas
            </div>
          </div>
        </div>
        
        <p className="text-gray-500 text-sm mb-6">
          Para melhor precis√£o, tira uma selfie com boa luz natural
        </p>
        
        <div className="p-3 bg-blue-50 rounded-xl border border-blue-200 mb-6">
          <p className="text-blue-700 text-xs">
            üí° <strong>Dica:</strong> Se tiveres problemas com a foto, podes continuar s√≥ com as caracter√≠sticas pessoais
          </p>
          <p className="text-blue-600 text-xs mt-1">
            üîí As fotos s√£o processadas de forma segura e n√£o s√£o armazenadas
          </p>
        </div>
        
        <div className="grid grid-cols-2 gap-4 mb-6">
          <button
            onClick={onCameraOpen}
            className="group relative bg-gradient-to-r from-blue-50 to-cyan-50 rounded-2xl p-6 border-2 border-blue-200 hover:border-blue-400 transition-all duration-300 transform hover:scale-105"
          >
            <Camera className="h-8 w-8 text-blue-500 mx-auto mb-3 group-hover:scale-110 transition-transform" />
            <span className="text-sm text-blue-600 font-semibold">TIRAR SELFIE</span>
          </button>
          
          <label className="group relative bg-gradient-to-r from-emerald-50 to-teal-50 rounded-2xl p-6 border-2 border-emerald-200 hover:border-emerald-400 transition-all duration-300 transform hover:scale-105 cursor-pointer">
            <Upload className="h-8 w-8 text-emerald-500 mx-auto mb-3 group-hover:scale-110 transition-transform" />
            <span className="text-sm text-emerald-600 font-semibold">CARREGAR</span>
            <input
              type="file"
              accept="image/*"
              onChange={onImageUpload}
              className="hidden"
            />
          </label>
        </div>
        
        <button
          onClick={onSkip}
          className="w-full bg-gray-200 text-gray-700 py-4 rounded-2xl font-semibold hover:bg-gray-300 transition-colors"
        >
          Continuar apenas com caracter√≠sticas pessoais
        </button>
      </div>
    </div>
  </div>
);

const PersonalQuestionsStep = ({ 
  faceImage, 
  personalQuestions, 
  setPersonalQuestions, 
  onSubmit, 
  isRevealed,
  skinToneOptions,
  eyeColorOptions,
  hairColorOptions,
  commonColors,
  toggleColorPreference,
  useLocalAnalysis,
  setUseLocalAnalysis
}) => (
  <div className={`space-y-6 transform transition-all duration-1000 delay-200 ${isRevealed ? 
    'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'}`}>
    <div className="bg-white rounded-[3rem] shadow-2xl p-8 border-4 border-gray-100">
      <div className="absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-rose-500 via-pink-500 to-purple-500"></div>
      
      <div className="text-center mb-6">
        {faceImage && (
          <div className="w-20 h-20 rounded-full mx-auto mb-4 overflow-hidden border-4 border-pink-200">
            <img src={faceImage} alt="Preview" className="w-full h-full object-cover" />
          </div>
        )}
        <h2 className="text-2xl font-black bg-gradient-to-r from-rose-600 to-purple-600 bg-clip-text text-transparent mb-2">
          CARACTER√çSTICAS PESSOAIS
        </h2>
        <p className="text-gray-600 text-sm">Ajuda-nos a personalizar a tua an√°lise</p>
      </div>

      <div className="space-y-6">
        {/* Skin Tone */}
        <div>
          <label className="block text-sm font-bold text-gray-700 mb-3 flex items-center">
            <div className="w-6 h-6 bg-gradient-to-r from-amber-400 to-orange-400 rounded-full mr-2"></div>
            Tom de Pele
          </label>
          <div className="grid grid-cols-2 gap-2">
            {skinToneOptions.map(tone => (
              <button
                key={tone}
                onClick={() => setPersonalQuestions(prev => ({ ...prev, skinTone: tone }))}
                className={`p-3 rounded-xl text-sm font-medium transition-all ${
                  personalQuestions.skinTone === tone
                    ? 'bg-gradient-to-r from-rose-500 to-pink-500 text-white shadow-lg'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {tone}
              </button>
            ))}
          </div>
        </div>

        {/* Eye Color */}
        <div>
          <label className="block text-sm font-bold text-gray-700 mb-3 flex items-center">
            <Eye className="h-5 w-5 text-blue-500 mr-2" />
            Cor dos Olhos
          </label>
          <div className="grid grid-cols-3 gap-2">
            {eyeColorOptions.map(color => (
              <button
                key={color}
                onClick={() => setPersonalQuestions(prev => ({ ...prev, eyeColor: color }))}
                className={`p-3 rounded-xl text-sm font-medium transition-all ${
                  personalQuestions.eyeColor === color
                    ? 'bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {color}
              </button>
            ))}
          </div>
        </div>

        {/* Hair Color */}
        <div>
          <label className="block text-sm font-bold text-gray-700 mb-3 flex items-center">
            <div className="w-6 h-6 bg-gradient-to-r from-amber-600 to-yellow-500 rounded-full mr-2"></div>
            Cor do Cabelo
          </label>
          <div className="grid grid-cols-2 gap-2">
            {hairColorOptions.map(color => (
              <button
                key={color}
                onClick={() => setPersonalQuestions(prev => ({ ...prev, hairColor: color }))}
                className={`p-3 rounded-xl text-sm font-medium transition-all ${
                  personalQuestions.hairColor === color
                    ? 'bg-gradient-to-r from-amber-500 to-yellow-500 text-white shadow-lg'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {color}
              </button>
            ))}
          </div>
        </div>

        {/* Preferred Colors */}
        <div>
          <label className="block text-sm font-bold text-gray-700 mb-3 flex items-center">
            <Heart className="h-5 w-5 text-red-500 mr-2" />
            Cores Preferidas (opcional)
          </label>
          <div className="grid grid-cols-5 gap-2">
            {commonColors.map(color => (
              <button
                key={color}
                onClick={() => toggleColorPreference(color, 'preferredColors')}
                className={`p-2 rounded-lg text-xs font-medium transition-all ${
                  personalQuestions.preferredColors.includes(color)
                    ? 'bg-green-500 text-white shadow-lg scale-105'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {color}
              </button>
            ))}
          </div>
        </div>

        {/* Disliked Colors */}
        <div>
          <label className="block text-sm font-bold text-gray-700 mb-3 flex items-center">
            <XCircle className="h-5 w-5 text-red-500 mr-2" />
            Cores que Evitas (opcional)
          </label>
          <div className="grid grid-cols-5 gap-2">
            {commonColors.map(color => (
              <button
                key={color}
                onClick={() => toggleColorPreference(color, 'dislikedColors')}
                className={`p-2 rounded-lg text-xs font-medium transition-all ${
                  personalQuestions.dislikedColors.includes(color)
                    ? 'bg-red-500 text-white shadow-lg scale-105'
                    : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                }`}
              >
                {color}
              </button>
            ))}
          </div>
        </div>

        <button
          onClick={onSubmit}
          disabled={!personalQuestions.skinTone || !personalQuestions.eyeColor || !personalQuestions.hairColor}
          className="w-full bg-gradient-to-r from-rose-500 to-pink-500 text-white py-4 rounded-2xl font-bold text-lg disabled:opacity-50 disabled:cursor-not-allowed transform transition-all duration-300 hover:scale-105 shadow-lg"
        >
          DESCOBRIR AS MINHAS CORES ‚ú®
        </button>

        <div className="mt-4 p-3 bg-gray-50 rounded-xl border border-gray-200">
          <label className="flex items-center space-x-3 cursor-pointer">
            <input
              type="checkbox"
              checked={useLocalAnalysis}
              onChange={(e) => setUseLocalAnalysis(e.target.checked)}
              className="w-4 h-4 text-rose-500 rounded focus:ring-rose-500"
            />
            <span className="text-sm text-gray-700">
              <strong>Usar sistema local</strong> (mais r√°pido e confi√°vel, baseado nas caracter√≠sticas)
            </span>
          </label>
          <p className="text-xs text-gray-500 mt-1 ml-7">
            üí° Recomendado se tiveres problemas com a an√°lise online
          </p>
        </div>
      </div>
    </div>
  </div>
);

const AnalysisResultsStep = ({ 
  analysis, 
  colorSeasons, 
  wardrobe, 
  navigateToScreen, 
  onReset, 
  onWardrobeAnalysis, 
  onUpdateWardrobe, 
  isRevealed 
}) => {
  const seasonData = colorSeasons[analysis.season];
  
  return (
    <div className={`space-y-4 max-h-[80vh] overflow-y-auto transform transition-all duration-1000 delay-200 ${isRevealed ? 
      'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'}`}>
      
      {/* Season Result Header */}
      <div className="relative bg-white rounded-[2.5rem] shadow-2xl border-4 border-gray-100 overflow-hidden">
        <div className={`absolute top-0 left-0 w-full h-3 bg-gradient-to-r ${seasonData.gradientFrom} ${seasonData.gradientTo}`}></div>
        
        <div className="p-8 text-center">
          <div className="text-6xl mb-4">{seasonData.emoji}</div>
          <h2 className={`text-4xl font-black bg-gradient-to-r ${seasonData.gradientFrom} ${seasonData.gradientTo} bg-clip-text text-transparent mb-2`}>
            √âS {analysis.season.toUpperCase()}!
          </h2>
          <div className="flex items-center justify-center space-x-2 mb-4">
            <Star className="h-5 w-5 text-yellow-500" />
            <span className="text-gray-600 font-semibold">Confian√ßa: {analysis.confidence}%</span>
            <Star className="h-5 w-5 text-yellow-500" />
          </div>
          <p className="text-gray-700 mb-6">{seasonData.description}</p>
          
          {/* Color Palette Preview */}
          <div className="flex justify-center space-x-1 mb-6">
            {analysis.personalizedPalette.slice(0, 8).map((color, index) => (
              <div
                key={index}
                className="w-8 h-8 rounded-full border-2 border-white shadow-lg transform hover:scale-110 transition-transform"
                style={{ backgroundColor: color }}
                title={color}
              />
            ))}
          </div>
          
          <p className="text-sm text-gray-600 italic">{analysis.justification}</p>
        </div>
      </div>

      {/* Detailed Analysis Cards */}
      <div className="grid gap-4">
        
        {/* Personal Palette */}
        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <Palette className="h-6 w-6 text-purple-500 mr-2" />
            A Tua Paleta Personalizada
          </h3>
          <div className="grid grid-cols-6 gap-3 mb-4">
            {analysis.personalizedPalette.map((color, index) => (
              <div key={index} className="text-center">
                <div
                  className="w-12 h-12 rounded-2xl border-2 border-white shadow-lg mx-auto mb-2 transform hover:scale-110 transition-all cursor-pointer"
                  style={{ backgroundColor: color }}
                  title={color}
                />
                <span className="text-xs text-gray-500 font-mono">{color}</span>
              </div>
            ))}
          </div>
        </div>

        {/* Season Characteristics */}
        <div className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <Info className="h-6 w-6 text-blue-500 mr-2" />
            Caracter√≠sticas da Esta√ß√£o {analysis.season}
          </h3>
          <div className="grid gap-4">
            <div>
              <h4 className="font-semibold text-green-700 mb-2">‚úÖ Cores que te favorecem:</h4>
              <p className="text-gray-700 text-sm">{seasonData.bestColors.join(', ')}</p>
            </div>
            <div>
              <h4 className="font-semibold text-red-700 mb-2">‚ùå Cores a evitar:</h4>
              <p className="text-gray-700 text-sm">{seasonData.avoidColors.join(', ')}</p>
            </div>
          </div>
        </div>

        {/* Wardrobe Analysis */}
        {analysis.wardrobeScores && analysis.wardrobeScores.length > 0 && (
          <div className="bg-white rounded-2xl p-6 shadow-xl">
            <h3 className="font-bold text-gray-800 mb-4 flex items-center">
              <Target className="h-6 w-6 text-indigo-500 mr-2" />
              An√°lise do Teu Arm√°rio
            </h3>
            <div className="space-y-3 max-h-48 overflow-y-auto">
              {analysis.wardrobeScores.map((item, index) => (
                <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-xl">
                  <div className="flex-1">
                    <span className="font-medium text-gray-800">{item.name}</span>
                    <p className="text-xs text-gray-600">{item.reasoning}</p>
                  </div>
                  <div className={`px-3 py-1 rounded-full text-xs font-bold ${
                    item.score >= 8 ? 'bg-green-100 text-green-800' :
                    item.score >= 6 ? 'bg-yellow-100 text-yellow-800' :
                    'bg-red-100 text-red-800'
                  }`}>
                    {item.score}/10
                  </div>
                </div>
              ))}
            </div>
            <button
              onClick={onUpdateWardrobe}
              className="w-full mt-4 bg-indigo-500 text-white py-3 rounded-xl font-semibold hover:bg-indigo-600 transition-colors"
            >
              Aplicar Scores ao Arm√°rio
            </button>
          </div>
        )}

        {/* Recommendations */}
        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <Lightbulb className="h-6 w-6 text-yellow-500 mr-2" />
            Recomenda√ß√µes Personalizadas
          </h3>
          <div className="space-y-4">
            {analysis.recommendations.addColors.length > 0 && (
              <div className="p-4 bg-green-50 rounded-xl border border-green-200">
                <h4 className="font-semibold text-green-800 mb-2 flex items-center">
                  <ShoppingBag className="h-4 w-4 mr-2" />
                  Adicionar ao arm√°rio:
                </h4>
                <p className="text-green-700 text-sm">{analysis.recommendations.addColors.join(', ')}</p>
              </div>
            )}
            
            {analysis.recommendations.avoidColors.length > 0 && (
              <div className="p-4 bg-red-50 rounded-xl border border-red-200">
                <h4 className="font-semibold text-red-800 mb-2">‚ùå Evitar:</h4>
                <p className="text-red-700 text-sm">{analysis.recommendations.avoidColors.join(', ')}</p>
              </div>
            )}
            
            {analysis.recommendations.makeupTips && (
              <div className="p-4 bg-purple-50 rounded-xl border border-purple-200">
                <h4 className="font-semibold text-purple-800 mb-2 flex items-center">
                  <Scissors className="h-4 w-4 mr-2" />
                  Dicas de maquilhagem:
                </h4>
                <p className="text-purple-700 text-sm">{analysis.recommendations.makeupTips}</p>
              </div>
            )}
          </div>
        </div>

        {/* Suggested Combinations */}
        {analysis.suggestedCombinations && analysis.suggestedCombinations.length > 0 && (
          <div className="bg-white rounded-2xl p-6 shadow-xl">
            <h3 className="font-bold text-gray-800 mb-4 flex items-center">
              <Crown className="h-6 w-6 text-yellow-500 mr-2" />
              Combina√ß√µes Sugeridas
            </h3>
            <div className="space-y-3">
              {analysis.suggestedCombinations.map((combo, index) => (
                <div key={index} className="p-4 bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl border border-gray-200">
                  <p className="text-gray-700 text-sm font-medium">{combo}</p>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Action Buttons */}
        <div className="grid grid-cols-1 gap-3">
          <button
            onClick={onWardrobeAnalysis}
            className="bg-gradient-to-r from-purple-500 to-pink-500 text-white py-4 rounded-2xl font-bold text-lg transform transition-all duration-300 hover:scale-105 shadow-lg"
          >
            <RefreshCw className="h-5 w-5 inline mr-2" />
            Analisar Arm√°rio Completo
          </button>
          
          <div className="grid grid-cols-2 gap-3">
            <button
              onClick={() => navigateToScreen('smart-shopping')}
              className="bg-gradient-to-r from-green-500 to-emerald-500 text-white py-3 rounded-xl font-semibold"
            >
              <ShoppingBag className="h-5 w-5 inline mr-2" />
              Ir √†s Compras
            </button>
            <button
              onClick={onReset}
              className="bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition-colors"
            >
              Refazer An√°lise
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

const ExistingAnalysisStep = ({ 
  analysis, 
  colorSeasons, 
  navigateToScreen, 
  onReanalyze, 
  onWardrobeAnalysis, 
  isRevealed 
}) => {
  const seasonData = colorSeasons[analysis.season];
  
  return (
    <div className={`space-y-4 transform transition-all duration-1000 delay-200 ${isRevealed ? 
      'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'}`}>
      
      {/* Header */}
      <div className="relative bg-white rounded-[2.5rem] shadow-2xl border-4 border-gray-100 overflow-hidden">
        <div className={`absolute top-0 left-0 w-full h-3 bg-gradient-to-r ${seasonData.gradientFrom} ${seasonData.gradientTo}`}></div>
        
        <div className="p-8 text-center">
          <div className="text-6xl mb-4">{seasonData.emoji}</div>
          <h2 className={`text-3xl font-black bg-gradient-to-r ${seasonData.gradientFrom} ${seasonData.gradientTo} bg-clip-text text-transparent mb-4`}>
            √âS {analysis.season.toUpperCase()}!
          </h2>
          <p className="text-gray-600 mb-6">{seasonData.description}</p>
          
          {/* Quick Palette */}
          <div className="flex justify-center space-x-1 mb-6">
            {(analysis.personalizedPalette || seasonData.colors).slice(0, 8).map((color, index) => (
              <div
                key={index}
                className="w-6 h-6 rounded-full border-2 border-white shadow"
                style={{ backgroundColor: color }}
              />
            ))}
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="grid gap-3">
        <button
          onClick={onWardrobeAnalysis}
          className="bg-gradient-to-r from-purple-500 to-pink-500 text-white py-4 rounded-2xl font-bold text-lg transform transition-all duration-300 hover:scale-105 shadow-lg"
        >
          <Target className="h-5 w-5 inline mr-2" />
          Analisar Arm√°rio Atual
        </button>
        
        <div className="grid grid-cols-2 gap-3">
          <button
            onClick={() => navigateToScreen('smart-shopping')}
            className="bg-gradient-to-r from-green-500 to-emerald-500 text-white py-3 rounded-xl font-semibold"
          >
            <ShoppingBag className="h-5 w-5 inline mr-1" />
            Compras
          </button>
          <button
            onClick={onReanalyze}
            className="bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition-colors"
          >
            <RefreshCw className="h-5 w-5 inline mr-1" />
            Refazer
          </button>
        </div>
      </div>
    </div>
  );
};

const CreativeWardrobeAnalysisStep = ({ 
  analysis, 
  wardrobeAnalysis, 
  colorSeasons, 
  userProfile, 
  navigateToScreen, 
  onRefreshAnalysis, 
  onResetColorAnalysis, 
  wardrobe, 
  isRevealed, 
  hoveredCard, 
  setHoveredCard 
}) => {
  const seasonData = colorSeasons[analysis?.season] || colorSeasons['Spring'];
  
  return (
    <div className={`space-y-4 transform transition-all duration-1000 delay-200 ${isRevealed ? 
      'translate-y-0 opacity-100' : 'translate-y-8 opacity-0'}`}>
      
      {/* Header */}
      <div className="relative bg-white rounded-[2.5rem] shadow-2xl border-4 border-gray-100 overflow-hidden">
        <div className={`absolute top-0 left-0 w-full h-3 bg-gradient-to-r ${seasonData.gradientFrom} ${seasonData.gradientTo}`}></div>
        
        <div className="p-6 text-center">
          <h2 className={`text-2xl font-black bg-gradient-to-r ${seasonData.gradientFrom} ${seasonData.gradientTo} bg-clip-text text-transparent mb-2`}>
            AN√ÅLISE DO ARM√ÅRIO
          </h2>
          <p className="text-gray-600 text-sm">Baseada na tua esta√ß√£o {analysis?.season} {seasonData.emoji}</p>
        </div>
      </div>

      {/* Statistics Cards */}
      {wardrobeAnalysis?.overallStats && (
        <div className="grid grid-cols-2 gap-3">
          <div className="bg-gradient-to-r from-green-50 to-emerald-50 rounded-2xl p-4 border border-green-200">
            <div className="text-center">
              <div className="text-2xl font-black text-green-600 mb-1">
                {wardrobeAnalysis.overallStats.compatiblePercentage}%
              </div>
              <div className="text-xs text-green-700 font-semibold">COMPAT√çVEIS</div>
            </div>
          </div>
          
          <div className="bg-gradient-to-r from-yellow-50 to-orange-50 rounded-2xl p-4 border border-yellow-200">
            <div className="text-center">
              <div className="text-2xl font-black text-yellow-600 mb-1">
                {wardrobeAnalysis.overallStats.starPieces}
              </div>
              <div className="text-xs text-yellow-700 font-semibold">PE√áAS STAR</div>
            </div>
          </div>
        </div>
      )}

      {/* Wardrobe Scores */}
      {wardrobeAnalysis?.detailedScores && (
        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <Target className="h-6 w-6 text-indigo-500 mr-2" />
            Scores do Arm√°rio
          </h3>
          <div className="space-y-3 max-h-48 overflow-y-auto">
            {wardrobeAnalysis.detailedScores.map((item, index) => (
              <div 
                key={index} 
                className={`flex items-center justify-between p-3 bg-gray-50 rounded-xl transition-all duration-300 ${
                  hoveredCard === index ? 'shadow-lg scale-105' : ''
                }`}
                onMouseEnter={() => setHoveredCard(index)}
                onMouseLeave={() => setHoveredCard(null)}
              >
                <div className="flex-1">
                  <span className="font-medium text-gray-800">{item.name}</span>
                  <p className="text-xs text-gray-600">{item.reasoning}</p>
                </div>
                <div className={`px-3 py-1 rounded-full text-xs font-bold ${
                  item.score >= 8 ? 'bg-green-100 text-green-800' :
                  item.score >= 6 ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {item.score}/10
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Wardrobe Gaps */}
      {wardrobeAnalysis?.wardrobeGaps && wardrobeAnalysis.wardrobeGaps.length > 0 && (
        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <Info className="h-6 w-6 text-blue-500 mr-2" />
            Gaps no Arm√°rio
          </h3>
          <div className="space-y-2">
            {wardrobeAnalysis.wardrobeGaps.map((gap, index) => (
              <div key={index} className="p-3 bg-blue-50 rounded-xl border border-blue-200">
                <p className="text-blue-800 text-sm font-medium">{gap}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Shopping Recommendations */}
      {wardrobeAnalysis?.shoppingRecommendations && wardrobeAnalysis.shoppingRecommendations.length > 0 && (
        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <ShoppingBag className="h-6 w-6 text-green-500 mr-2" />
            Recomenda√ß√µes de Compras
          </h3>
          <div className="space-y-2">
            {wardrobeAnalysis.shoppingRecommendations.map((rec, index) => (
              <div key={index} className="p-3 bg-green-50 rounded-xl border border-green-200">
                <p className="text-green-800 text-sm font-medium">{rec}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Creative Outfits */}
      {wardrobeAnalysis?.creativeOutfits && wardrobeAnalysis.creativeOutfits.length > 0 && (
        <div className="bg-white rounded-2xl p-6 shadow-xl">
          <h3 className="font-bold text-gray-800 mb-4 flex items-center">
            <Crown className="h-6 w-6 text-purple-500 mr-2" />
            Outfits Criativos
          </h3>
          <div className="space-y-3">
            {wardrobeAnalysis.creativeOutfits.map((outfit, index) => (
              <div key={index} className="p-4 bg-gradient-to-r from-purple-50 to-pink-50 rounded-xl border border-purple-200">
                <p className="text-purple-800 text-sm font-medium">{outfit}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div className="grid gap-3">
        <button
          onClick={onRefreshAnalysis}
          className="bg-gradient-to-r from-indigo-500 to-purple-500 text-white py-4 rounded-2xl font-bold text-lg transform transition-all duration-300 hover:scale-105 shadow-lg"
        >
          <RefreshCw className="h-5 w-5 inline mr-2" />
          Atualizar An√°lise
        </button>
        
        <div className="grid grid-cols-2 gap-3">
          <button
            onClick={() => navigateToScreen('smart-shopping')}
            className="bg-gradient-to-r from-green-500 to-emerald-500 text-white py-3 rounded-xl font-semibold"
          >
            <ShoppingBag className="h-5 w-5 inline mr-1" />
            Ir √†s Compras
          </button>
          <button
            onClick={onResetColorAnalysis}
            className="bg-gray-200 text-gray-700 py-3 rounded-xl font-semibold hover:bg-gray-300 transition-colors"
          >
            Voltar
          </button>
        </div>
      </div>

      {/* Empty State */}
      {!wardrobeAnalysis && (
        <div className="text-center py-8 text-gray-500">
          <Lightbulb className="h-12 w-12 text-gray-400 mx-auto mb-2" />
          <p className="text-sm">A carregar an√°lise do arm√°rio...</p>
        </div>
      )}
    </div>
  );
};

export default ColorAnalysisScreen;